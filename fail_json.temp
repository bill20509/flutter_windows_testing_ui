{"pytest_version": "7.1.1", "$report_type": "SessionStart"}
{"nodeid": "", "outcome": "passed", "longrepr": null, "result": null, "sections": [], "$report_type": "CollectReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_apps_get", "location": ["tests/YCP/launcher_page_test.py", 106, "Test.test_launcher_apps_get"], "keywords": {"test_launcher_apps_get": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c5e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125895040>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c5e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125895040>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.024548248000000106, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_apps_get", "location": ["tests/YCP/launcher_page_test.py", 106, "Test.test_launcher_apps_get"], "keywords": {"test_launcher_apps_get": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00029201399999978506, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_apps_open", "location": ["tests/YCP/launcher_page_test.py", 117, "Test.test_launcher_apps_open"], "keywords": {"test_launcher_apps_open": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c730>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258fac70>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c730>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258fac70>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.019873897000000085, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_apps_open", "location": ["tests/YCP/launcher_page_test.py", 117, "Test.test_launcher_apps_open"], "keywords": {"test_launcher_apps_open": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00030105700000016, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_banner_gradient", "location": ["tests/YCP/launcher_page_test.py", 17, "Test.test_launcher_banner_gradient"], "keywords": {"test_launcher_banner_gradient": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585f6d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258f8a00>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585f6d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258f8a00>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.021895580000000026, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_banner_gradient", "location": ["tests/YCP/launcher_page_test.py", 17, "Test.test_launcher_banner_gradient"], "keywords": {"test_launcher_banner_gradient": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0006348259999999772, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_banner_scroll_hint", "location": ["tests/YCP/launcher_page_test.py", 22, "Test.test_launcher_banner_scroll_hint"], "keywords": {"test_launcher_banner_scroll_hint": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585f7f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125901b20>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585f7f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125901b20>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.021944527000000047, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_banner_scroll_hint", "location": ["tests/YCP/launcher_page_test.py", 22, "Test.test_launcher_banner_scroll_hint"], "keywords": {"test_launcher_banner_scroll_hint": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00032790299999985173, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_camera", "location": ["tests/YCP/launcher_page_test.py", 142, "Test.test_launcher_camera"], "keywords": {"test_launcher_camera": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586cb20>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258f8280>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586cb20>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258f8280>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.021562620000000088, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_camera", "location": ["tests/YCP/launcher_page_test.py", 142, "Test.test_launcher_camera"], "keywords": {"test_launcher_camera": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00029549300000009104, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_community_see_all", "location": ["tests/YCP/launcher_page_test.py", 92, "Test.test_launcher_community_see_all"], "keywords": {"test_launcher_community_see_all": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c340>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125901d60>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c340>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125901d60>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02163736599999977, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_community_see_all", "location": ["tests/YCP/launcher_page_test.py", 92, "Test.test_launcher_community_see_all"], "keywords": {"test_launcher_community_see_all": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00030454500000010043, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_crown", "location": ["tests/YCP/launcher_page_test.py", 135, "Test.test_launcher_crown"], "keywords": {"test_launcher_crown": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c9d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258f7880>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c9d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258f7880>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0228445439999998, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_crown", "location": ["tests/YCP/launcher_page_test.py", 135, "Test.test_launcher_crown"], "keywords": {"test_launcher_crown": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00043307600000019875, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_discovery", "location": ["tests/YCP/launcher_page_test.py", 42, "Test.test_launcher_discovery"], "keywords": {"test_launcher_discovery": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fbe0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125928ca0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fbe0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125928ca0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.022250861999999927, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_discovery", "location": ["tests/YCP/launcher_page_test.py", 42, "Test.test_launcher_discovery"], "keywords": {"test_launcher_discovery": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0004117939999996878, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_header", "location": ["tests/YCP/launcher_page_test.py", 28, "Test.test_launcher_header"], "keywords": {"test_launcher_header": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585f940>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125930340>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585f940>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125930340>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.021511605999999794, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_header", "location": ["tests/YCP/launcher_page_test.py", 28, "Test.test_launcher_header"], "keywords": {"test_launcher_header": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0003209260000001102, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_change_background", "location": ["tests/YCP/launcher_page_test.py", 61, "Test.test_launcher_hot_change_background"], "keywords": {"test_launcher_hot_change_background": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585ffd0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125938bb0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585ffd0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125938bb0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02327371999999972, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_change_background", "location": ["tests/YCP/launcher_page_test.py", 61, "Test.test_launcher_hot_change_background"], "keywords": {"test_launcher_hot_change_background": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0006359639999997668, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_my_stickers", "location": ["tests/YCP/launcher_page_test.py", 73, "Test.test_launcher_hot_my_stickers"], "keywords": {"test_launcher_hot_my_stickers": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fdf0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259001f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fdf0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259001f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02200516100000005, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_my_stickers", "location": ["tests/YCP/launcher_page_test.py", 73, "Test.test_launcher_hot_my_stickers"], "keywords": {"test_launcher_hot_my_stickers": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0002879660000001394, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_removal", "location": ["tests/YCP/launcher_page_test.py", 67, "Test.test_launcher_hot_removal"], "keywords": {"test_launcher_hot_removal": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c160>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125922730>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c160>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125922730>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.022775036000000082, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_removal", "location": ["tests/YCP/launcher_page_test.py", 67, "Test.test_launcher_hot_removal"], "keywords": {"test_launcher_hot_removal": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0003147449999998386, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_template", "location": ["tests/YCP/launcher_page_test.py", 79, "Test.test_launcher_hot_template"], "keywords": {"test_launcher_hot_template": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585f910>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259015e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585f910>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259015e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.021201968000000182, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_template", "location": ["tests/YCP/launcher_page_test.py", 79, "Test.test_launcher_hot_template"], "keywords": {"test_launcher_hot_template": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0003430800000003842, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_wraparound", "location": ["tests/YCP/launcher_page_test.py", 55, "Test.test_launcher_hot_wraparound"], "keywords": {"test_launcher_hot_wraparound": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fe80>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125922ca0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fe80>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125922ca0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.023317894999999922, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_hot_wraparound", "location": ["tests/YCP/launcher_page_test.py", 55, "Test.test_launcher_hot_wraparound"], "keywords": {"test_launcher_hot_wraparound": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00036561900000009473, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_how_to_see_all", "location": ["tests/YCP/launcher_page_test.py", 85, "Test.test_launcher_how_to_see_all"], "keywords": {"test_launcher_how_to_see_all": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c250>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259014c0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c250>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259014c0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.022419540000000016, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_how_to_see_all", "location": ["tests/YCP/launcher_page_test.py", 85, "Test.test_launcher_how_to_see_all"], "keywords": {"test_launcher_how_to_see_all": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00030338399999996213, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_logo", "location": ["tests/YCP/launcher_page_test.py", 35, "Test.test_launcher_logo"], "keywords": {"test_launcher_logo": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fa90>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125934940>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fa90>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125934940>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.022759177999999824, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_logo", "location": ["tests/YCP/launcher_page_test.py", 35, "Test.test_launcher_logo"], "keywords": {"test_launcher_logo": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00039053799999999583, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_photo_challenge_see_all", "location": ["tests/YCP/launcher_page_test.py", 99, "Test.test_launcher_photo_challenge_see_all"], "keywords": {"test_launcher_photo_challenge_see_all": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c490>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259306d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c490>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259306d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.022203096999999783, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_photo_challenge_see_all", "location": ["tests/YCP/launcher_page_test.py", 99, "Test.test_launcher_photo_challenge_see_all"], "keywords": {"test_launcher_photo_challenge_see_all": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0003066650000000948, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_settings", "location": ["tests/YCP/launcher_page_test.py", 128, "Test.test_launcher_settings"], "keywords": {"test_launcher_settings": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c880>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259386a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12586c880>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259386a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.023665595999999844, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_settings", "location": ["tests/YCP/launcher_page_test.py", 128, "Test.test_launcher_settings"], "keywords": {"test_launcher_settings": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0005011019999998645, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_store", "location": ["tests/YCP/launcher_page_test.py", 48, "Test.test_launcher_store"], "keywords": {"test_launcher_store": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fd30>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125901520>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.launcher_page_test.Test object at 0x12585fd30>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/launcher_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125901520>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.023015802999999835, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/launcher_page_test.py::Test::test_launcher_store", "location": ["tests/YCP/launcher_page_test.py", 48, "Test.test_launcher_store"], "keywords": {"test_launcher_store": 1, "launcher": 1, "pytestmark": 1, "Test": 1, "launcher_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00031263900000011446, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_feature_room_page_test.py::Test::test_brush", "location": ["tests/YCP/photo_edit_feature_room_page_test.py", 28, "Test.test_brush"], "keywords": {"test_brush": 1, "test": 1, "pytestmark": 1, "Test": 1, "photo_edit_feature_room_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_feature_room_page_test.Test object at 0x1258663a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_feature_room_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125934370>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_feature_room_page_test.Test object at 0x1258663a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_feature_room_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125934370>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0249356220000001, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_feature_room_page_test.py::Test::test_brush", "location": ["tests/YCP/photo_edit_feature_room_page_test.py", 28, "Test.test_brush"], "keywords": {"test_brush": 1, "test": 1, "pytestmark": 1, "Test": 1, "photo_edit_feature_room_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0003023429999999827, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_feature_room_page_test.py::Test::test_sticker", "location": ["tests/YCP/photo_edit_feature_room_page_test.py", 36, "Test.test_sticker"], "keywords": {"test_sticker": 1, "test": 1, "pytestmark": 1, "Test": 1, "photo_edit_feature_room_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_feature_room_page_test.Test object at 0x1258664f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_feature_room_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125895ca0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_feature_room_page_test.Test object at 0x1258664f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_feature_room_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125895ca0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.021209935999999985, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_feature_room_page_test.py::Test::test_sticker", "location": ["tests/YCP/photo_edit_feature_room_page_test.py", 36, "Test.test_sticker"], "keywords": {"test_sticker": 1, "test": 1, "pytestmark": 1, "Test": 1, "photo_edit_feature_room_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0002716330000001044, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_feature_room_page_test.py::Test::test_tools", "location": ["tests/YCP/photo_edit_feature_room_page_test.py", 20, "Test.test_tools"], "keywords": {"test_tools": 1, "test": 1, "pytestmark": 1, "Test": 1, "photo_edit_feature_room_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_feature_room_page_test.Test object at 0x125866250>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_feature_room_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259283a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_feature_room_page_test.Test object at 0x125866250>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_feature_room_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259283a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02330585199999957, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_feature_room_page_test.py::Test::test_tools", "location": ["tests/YCP/photo_edit_feature_room_page_test.py", 20, "Test.test_tools"], "keywords": {"test_tools": 1, "test": 1, "pytestmark": 1, "Test": 1, "photo_edit_feature_room_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0003903649999998926, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_edit_tools", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 17, "Test.test_edit_tools"], "keywords": {"test_edit_tools": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x125866d00>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258956a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x125866d00>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1258956a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.022280090000000197, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_edit_tools", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 17, "Test.test_edit_tools"], "keywords": {"test_edit_tools": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0002894119999998779, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_beautify_tab", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 77, "Test.test_lobby_beautify_tab"], "keywords": {"test_lobby_beautify_tab": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x125866c70>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125928f70>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x125866c70>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125928f70>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02164980899999991, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_beautify_tab", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 77, "Test.test_lobby_beautify_tab"], "keywords": {"test_lobby_beautify_tab": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00035335500000011066, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_crown", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 68, "Test.test_lobby_crown"], "keywords": {"test_lobby_crown": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x125866c10>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x12591cb50>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x125866c10>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x12591cb50>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.021203365999999946, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_crown", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 68, "Test.test_lobby_crown"], "keywords": {"test_lobby_crown": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00031822099999967435, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_redo", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 43, "Test.test_lobby_redo"], "keywords": {"test_lobby_redo": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x12586c700>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259223a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x12586c700>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x1259223a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02246498500000005, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_redo", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 43, "Test.test_lobby_redo"], "keywords": {"test_lobby_redo": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00028036700000022563, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_save", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 58, "Test.test_lobby_save"], "keywords": {"test_lobby_save": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x12585fa00>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125900580>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x12585fa00>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125900580>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02259207399999985, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_save", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 58, "Test.test_lobby_save"], "keywords": {"test_lobby_save": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0002656620000003329, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_undo", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 29, "Test.test_lobby_undo"], "keywords": {"test_lobby_undo": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x125866e50>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x12593b310>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_lobby_page_test.Test object at 0x125866e50>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_lobby_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x12593b310>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02278880800000005, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_lobby_page_test.py::Test::test_lobby_undo", "location": ["tests/YCP/photo_edit_lobby_page_test.py", 29, "Test.test_lobby_undo"], "keywords": {"test_lobby_undo": 1, "edit": 1, "pytestmark": 1, "Test": 1, "photo_edit_lobby_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0007302430000000193, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_crop_rotate_45", "location": ["tests/YCP/photo_edit_page_test.py", 30, "Test.test_edit_crop_rotate_45"], "keywords": {"test_edit_crop_rotate_45": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8d00>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882940>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8d00>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8d00>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x125934b80>"], ["_stacktrace", "<traceback object at 0x1258fc9c0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", ">           conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 174, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", "                sock.connect(sa)", "                return sock", "    ", "            except socket.error as e:", "                err = e", "                if sock is not None:", "                    sock.close()", "                    sock = None", "    ", "        if err is not None:", ">           raise err"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 95, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", ">               sock.connect(sa)", "E               ConnectionRefusedError: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def urlopen(", "        self,", "        method,", "        url,", "        body=None,", "        headers=None,", "        retries=None,", "        redirect=True,", "        assert_same_host=True,", "        timeout=_Default,", "        pool_timeout=None,", "        release_conn=None,", "        chunked=False,", "        body_pos=None,", "        **response_kw", "    ):", "        \"\"\"", "        Get a connection from the pool and perform an HTTP request. This is the", "        lowest level call for making a request, so you'll need to specify all", "        the raw details.", "    ", "        .. note::", "    ", "           More commonly, it's appropriate to use a convenience method provided", "           by :class:`.RequestMethods`, such as :meth:`request`.", "    ", "        .. note::", "    ", "           `release_conn` will only behave as expected if", "           `preload_content=False` because we want to make", "           `preload_content=False` the default behaviour someday soon without", "           breaking backwards compatibility.", "    ", "        :param method:", "            HTTP request method (such as GET, POST, PUT, etc.)", "    ", "        :param url:", "            The URL to perform the request on.", "    ", "        :param body:", "            Data to send in the request body, either :class:`str`, :class:`bytes`,", "            an iterable of :class:`str`/:class:`bytes`, or a file-like object.", "    ", "        :param headers:", "            Dictionary of custom headers to send, such as User-Agent,", "            If-None-Match, etc. If None, pool headers are used. If provided,", "            these headers completely replace any pool-specific headers.", "    ", "        :param retries:", "            Configure the number of retries to allow before raising a", "            :class:`~urllib3.exceptions.MaxRetryError` exception.", "    ", "            Pass ``None`` to retry until you receive a response. Pass a", "            :class:`~urllib3.util.retry.Retry` object for fine-grained control", "            over different types of retries.", "            Pass an integer number to retry connection errors that many times,", "            but no other types of errors. Pass zero to never retry.", "    ", "            If ``False``, then retries are disabled and any exception is raised", "            immediately. Also, instead of raising a MaxRetryError on redirects,", "            the redirect response will be returned.", "    ", "        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.", "    ", "        :param redirect:", "            If True, automatically handle redirects (status codes 301, 302,", "            303, 307, 308). Each redirect counts as a retry. Disabling retries", "            will disable redirect, too.", "    ", "        :param assert_same_host:", "            If ``True``, will make sure that the host of the pool requests is", "            consistent else will raise HostChangedError. When ``False``, you can", "            use the pool on an HTTP proxy and request foreign hosts.", "    ", "        :param timeout:", "            If specified, overrides the default timeout for this one", "            request. It may be a float (in seconds) or an instance of", "            :class:`urllib3.util.Timeout`.", "    ", "        :param pool_timeout:", "            If set and the pool is set to block=True, then this method will", "            block for ``pool_timeout`` seconds and raise EmptyPoolError if no", "            connection is available within the time period.", "    ", "        :param release_conn:", "            If False, then the urlopen call will not release the connection", "            back into the pool once a response is received (but will release if", "            you read the entire contents of the response such as when", "            `preload_content=True`). This is useful if you're not preloading", "            the response's content immediately. You will need to call", "            ``r.release_conn()`` on the response ``r`` to return the connection", "            back into the pool. If None, it takes the value of", "            ``response_kw.get('preload_content', True)``.", "    ", "        :param chunked:", "            If True, urllib3 will send the body using chunked transfer", "            encoding. Otherwise, urllib3 will send the body using the standard", "            content-length form. Defaults to False.", "    ", "        :param int body_pos:", "            Position to seek to in file-like body in the event of a retry or", "            redirect. Typically this won't need to be set because urllib3 will", "            auto-populate the value when needed.", "    ", "        :param \\\\**response_kw:", "            Additional parameters are passed to", "            :meth:`urllib3.response.HTTPResponse.from_httplib`", "        \"\"\"", "    ", "        parsed_url = parse_url(url)", "        destination_scheme = parsed_url.scheme", "    ", "        if headers is None:", "            headers = self.headers", "    ", "        if not isinstance(retries, Retry):", "            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)", "    ", "        if release_conn is None:", "            release_conn = response_kw.get(\"preload_content\", True)", "    ", "        # Check host", "        if assert_same_host and not self.is_same_host(url):", "            raise HostChangedError(self, url, retries)", "    ", "        # Ensure that the URL we're connecting to is properly encoded", "        if url.startswith(\"/\"):", "            url = six.ensure_str(_encode_target(url))", "        else:", "            url = six.ensure_str(parsed_url.url)", "    ", "        conn = None", "    ", "        # Track whether `conn` needs to be released before", "        # returning/raising/recursing. Update this variable if necessary, and", "        # leave `release_conn` constant throughout the function. That way, if", "        # the function recurses, the original value of `release_conn` will be", "        # passed down into the recursive call, and its value will be respected.", "        #", "        # See issue #651 [1] for details.", "        #", "        # [1] <https://github.com/urllib3/urllib3/issues/651>", "        release_this_conn = release_conn", "    ", "        http_tunnel_required = connection_requires_http_tunnel(", "            self.proxy, self.proxy_config, destination_scheme", "        )", "    ", "        # Merge the proxy headers. Only done when not using HTTP CONNECT. We", "        # have to copy the headers dict so we can safely change it without those", "        # changes being reflected in anyone else's copy.", "        if not http_tunnel_required:", "            headers = headers.copy()", "            headers.update(self.proxy_headers)", "    ", "        # Must keep the exception bound to a separate variable or else Python 3", "        # complains about UnboundLocalError.", "        err = None", "    ", "        # Keep track of whether we cleanly exited the except block. This", "        # ensures we do proper cleanup in finally.", "        clean_exit = False", "    ", "        # Rewind body position, if needed. Record current position", "        # for future rewinds in the event of a redirect/retry.", "        body_pos = set_file_position(body, body_pos)", "    ", "        try:", "            # Request a connection from the queue.", "            timeout_obj = self._get_timeout(timeout)", "            conn = self._get_conn(timeout=pool_timeout)", "    ", "            conn.timeout = timeout_obj.connect_timeout", "    ", "            is_new_proxy_conn = self.proxy is not None and not getattr(", "                conn, \"sock\", None", "            )", "            if is_new_proxy_conn and http_tunnel_required:", "                self._prepare_proxy(conn)", "    ", "            # Make the request on the httplib connection object.", ">           httplib_response = self._make_request(", "                conn,", "                method,", "                url,", "                timeout=timeout_obj,", "                body=body,", "                headers=headers,", "                chunked=chunked,", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x125934b80>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["retries", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["redirect", "False"], ["assert_same_host", "False"], ["timeout", "<object object at 0x107f60b10>"], ["pool_timeout", "None"], ["release_conn", "True"], ["chunked", "False"], ["body_pos", "None"], ["response_kw", "{'request_url': 'http://localhost:4723/wd/hub/session'}"], ["parsed_url", "Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)"], ["destination_scheme", "None"], ["conn", "None"], ["release_this_conn", "True"], ["http_tunnel_required", "False"], ["err", "None"], ["clean_exit", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 703, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _make_request(", "        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw", "    ):", "        \"\"\"", "        Perform a request on a given urllib connection object taken from our", "        pool.", "    ", "        :param conn:", "            a connection from one of our connection pools", "    ", "        :param timeout:", "            Socket timeout in seconds for the request. This can be a", "            float or integer, which will set the same timeout value for", "            the socket connect and the socket read, or an instance of", "            :class:`urllib3.util.Timeout`, which gives you more fine-grained", "            control over your timeouts.", "        \"\"\"", "        self.num_requests += 1", "    ", "        timeout_obj = self._get_timeout(timeout)", "        timeout_obj.start_connect()", "        conn.timeout = timeout_obj.connect_timeout", "    ", "        # Trigger any extra validation we need to do.", "        try:", "            self._validate_conn(conn)", "        except (SocketTimeout, BaseSSLError) as e:", "            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.", "            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)", "            raise", "    ", "        # conn.request() calls http.client.*.request, not the method in", "        # urllib3.request. It also calls makefile (recv) on the socket.", "        try:", "            if chunked:", "                conn.request_chunked(method, url, **httplib_request_kw)", "            else:", ">               conn.request(method, url, **httplib_request_kw)"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x125934b80>"], ["conn", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["timeout", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"], ["chunked", "False"], ["httplib_request_kw", "{'body': '{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformV...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}}"], ["timeout_obj", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 398, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers=None):", "        if headers is None:", "            headers = {}", "        else:", "            # Avoid modifying the headers passed into .request()", "            headers = headers.copy()", "        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):", "            headers[\"User-Agent\"] = _get_default_user_agent()", ">       super(HTTPConnection, self).request(method, url, body=body, headers=headers)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 239, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers={}, *,", "                encode_chunked=False):", "        \"\"\"Send a complete request to the server.\"\"\"", ">       self._send_request(method, url, body, headers, encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1285, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_request(self, method, url, body, headers, encode_chunked):", "        # Honor explicitly requested Host: and Accept-Encoding: headers.", "        header_names = frozenset(k.lower() for k in headers)", "        skips = {}", "        if 'host' in header_names:", "            skips['skip_host'] = 1", "        if 'accept-encoding' in header_names:", "            skips['skip_accept_encoding'] = 1", "    ", "        self.putrequest(method, url, **skips)", "    ", "        # chunked encoding will happen if HTTP/1.1 is used and either", "        # the caller passes encode_chunked=True or the following", "        # conditions hold:", "        # 1. content-length has not been explicitly set", "        # 2. the body is a file or iterable, but not a str or bytes-like", "        # 3. Transfer-Encoding has NOT been explicitly set by the caller", "    ", "        if 'content-length' not in header_names:", "            # only chunk body if not explicitly set for backwards", "            # compatibility, assuming the client code is already handling the", "            # chunking", "            if 'transfer-encoding' not in header_names:", "                # if content-length cannot be automatically determined, fall", "                # back to chunked encoding", "                encode_chunked = False", "                content_length = self._get_content_length(body, method)", "                if content_length is None:", "                    if body is not None:", "                        if self.debuglevel > 0:", "                            print('Unable to determine size of %r' % body)", "                        encode_chunked = True", "                        self.putheader('Transfer-Encoding', 'chunked')", "                else:", "                    self.putheader('Content-Length', str(content_length))", "        else:", "            encode_chunked = False", "    ", "        for hdr, value in headers.items():", "            self.putheader(hdr, value)", "        if isinstance(body, str):", "            # RFC 2616 Section 3.7.1 says that text default has a", "            # default charset of iso-8859-1.", "            body = _encode(body, 'body')", ">       self.endheaders(body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1331, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def endheaders(self, message_body=None, *, encode_chunked=False):", "        \"\"\"Indicate that the last header line has been sent to the server.", "    ", "        This method sends the request to the server.  The optional message_body", "        argument can be used to pass a message body associated with the", "        request.", "        \"\"\"", "        if self.__state == _CS_REQ_STARTED:", "            self.__state = _CS_REQ_SENT", "        else:", "            raise CannotSendHeader()", ">       self._send_output(message_body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1280, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_output(self, message_body=None, encode_chunked=False):", "        \"\"\"Send the currently buffered request and clear the buffer.", "    ", "        Appends an extra \\\\r\\\\n to the buffer.", "        A message_body may be specified, to be appended to the request.", "        \"\"\"", "        self._buffer.extend((b\"\", b\"\"))", "        msg = b\"\\r\\n\".join(self._buffer)", "        del self._buffer[:]", ">       self.send(msg)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1040, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def send(self, data):", "        \"\"\"Send `data' to the server.", "        ``data`` can be a string object, a bytes object, an array object, a", "        file-like object that supports a .read() method, or an iterable object.", "        \"\"\"", "    ", "        if self.sock is None:", "            if self.auto_open:", ">               self.connect()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"], ["data", "b'POST /wd/hub/session HTTP/1.1\\r\\nHost: localhost:4723\\r\\nAccept-Encoding: identity\\r\\nContent-Length: 1219\\r\\nAccept...enium/4.1.3 (python mac))\\r\\nConnection: keep-alive\\r\\nX-Idempotency-Key: cd99dff4-b1dc-4d1d-be3d-076a2fa77734\\r\\n\\r\\n'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 980, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def connect(self):", ">       conn = self._new_conn()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 205, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", "            conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )", "    ", "        except SocketTimeout:", "            raise ConnectTimeoutError(", "                self,", "                \"Connection to %s timed out. (connect timeout=%s)\"", "                % (self.host, self.timeout),", "            )", "    ", "        except SocketError as e:", ">           raise NewConnectionError(", "                self, \"Failed to establish a new connection: %s\" % e", "            )", "E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x1258f8d00>: Failed to establish a new connection: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x1258f8d00>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "NewConnectionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x1258f8d00>: Failed to establish a new connection: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882940>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8d00>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8d00>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x125934b80>"], ["_stacktrace", "<traceback object at 0x1258fc9c0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8d00>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, null]]}, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x125934ca0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8e20>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8550>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.042624964999999904, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_crop_rotate_45", "location": ["tests/YCP/photo_edit_page_test.py", 30, "Test.test_edit_crop_rotate_45"], "keywords": {"test_edit_crop_rotate_45": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x125934ca0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8e20>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x1258f8550>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.0002717709999999762, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_crop_rotate_flip", "location": ["tests/YCP/photo_edit_page_test.py", 40, "Test.test_edit_crop_rotate_flip"], "keywords": {"test_edit_crop_rotate_flip": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc300a0>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882a90>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc300a0>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc300a0>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bc30640>"], ["_stacktrace", "<traceback object at 0x12bcc4200>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", ">           conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 174, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", "                sock.connect(sa)", "                return sock", "    ", "            except socket.error as e:", "                err = e", "                if sock is not None:", "                    sock.close()", "                    sock = None", "    ", "        if err is not None:", ">           raise err"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 95, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", ">               sock.connect(sa)", "E               ConnectionRefusedError: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def urlopen(", "        self,", "        method,", "        url,", "        body=None,", "        headers=None,", "        retries=None,", "        redirect=True,", "        assert_same_host=True,", "        timeout=_Default,", "        pool_timeout=None,", "        release_conn=None,", "        chunked=False,", "        body_pos=None,", "        **response_kw", "    ):", "        \"\"\"", "        Get a connection from the pool and perform an HTTP request. This is the", "        lowest level call for making a request, so you'll need to specify all", "        the raw details.", "    ", "        .. note::", "    ", "           More commonly, it's appropriate to use a convenience method provided", "           by :class:`.RequestMethods`, such as :meth:`request`.", "    ", "        .. note::", "    ", "           `release_conn` will only behave as expected if", "           `preload_content=False` because we want to make", "           `preload_content=False` the default behaviour someday soon without", "           breaking backwards compatibility.", "    ", "        :param method:", "            HTTP request method (such as GET, POST, PUT, etc.)", "    ", "        :param url:", "            The URL to perform the request on.", "    ", "        :param body:", "            Data to send in the request body, either :class:`str`, :class:`bytes`,", "            an iterable of :class:`str`/:class:`bytes`, or a file-like object.", "    ", "        :param headers:", "            Dictionary of custom headers to send, such as User-Agent,", "            If-None-Match, etc. If None, pool headers are used. If provided,", "            these headers completely replace any pool-specific headers.", "    ", "        :param retries:", "            Configure the number of retries to allow before raising a", "            :class:`~urllib3.exceptions.MaxRetryError` exception.", "    ", "            Pass ``None`` to retry until you receive a response. Pass a", "            :class:`~urllib3.util.retry.Retry` object for fine-grained control", "            over different types of retries.", "            Pass an integer number to retry connection errors that many times,", "            but no other types of errors. Pass zero to never retry.", "    ", "            If ``False``, then retries are disabled and any exception is raised", "            immediately. Also, instead of raising a MaxRetryError on redirects,", "            the redirect response will be returned.", "    ", "        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.", "    ", "        :param redirect:", "            If True, automatically handle redirects (status codes 301, 302,", "            303, 307, 308). Each redirect counts as a retry. Disabling retries", "            will disable redirect, too.", "    ", "        :param assert_same_host:", "            If ``True``, will make sure that the host of the pool requests is", "            consistent else will raise HostChangedError. When ``False``, you can", "            use the pool on an HTTP proxy and request foreign hosts.", "    ", "        :param timeout:", "            If specified, overrides the default timeout for this one", "            request. It may be a float (in seconds) or an instance of", "            :class:`urllib3.util.Timeout`.", "    ", "        :param pool_timeout:", "            If set and the pool is set to block=True, then this method will", "            block for ``pool_timeout`` seconds and raise EmptyPoolError if no", "            connection is available within the time period.", "    ", "        :param release_conn:", "            If False, then the urlopen call will not release the connection", "            back into the pool once a response is received (but will release if", "            you read the entire contents of the response such as when", "            `preload_content=True`). This is useful if you're not preloading", "            the response's content immediately. You will need to call", "            ``r.release_conn()`` on the response ``r`` to return the connection", "            back into the pool. If None, it takes the value of", "            ``response_kw.get('preload_content', True)``.", "    ", "        :param chunked:", "            If True, urllib3 will send the body using chunked transfer", "            encoding. Otherwise, urllib3 will send the body using the standard", "            content-length form. Defaults to False.", "    ", "        :param int body_pos:", "            Position to seek to in file-like body in the event of a retry or", "            redirect. Typically this won't need to be set because urllib3 will", "            auto-populate the value when needed.", "    ", "        :param \\\\**response_kw:", "            Additional parameters are passed to", "            :meth:`urllib3.response.HTTPResponse.from_httplib`", "        \"\"\"", "    ", "        parsed_url = parse_url(url)", "        destination_scheme = parsed_url.scheme", "    ", "        if headers is None:", "            headers = self.headers", "    ", "        if not isinstance(retries, Retry):", "            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)", "    ", "        if release_conn is None:", "            release_conn = response_kw.get(\"preload_content\", True)", "    ", "        # Check host", "        if assert_same_host and not self.is_same_host(url):", "            raise HostChangedError(self, url, retries)", "    ", "        # Ensure that the URL we're connecting to is properly encoded", "        if url.startswith(\"/\"):", "            url = six.ensure_str(_encode_target(url))", "        else:", "            url = six.ensure_str(parsed_url.url)", "    ", "        conn = None", "    ", "        # Track whether `conn` needs to be released before", "        # returning/raising/recursing. Update this variable if necessary, and", "        # leave `release_conn` constant throughout the function. That way, if", "        # the function recurses, the original value of `release_conn` will be", "        # passed down into the recursive call, and its value will be respected.", "        #", "        # See issue #651 [1] for details.", "        #", "        # [1] <https://github.com/urllib3/urllib3/issues/651>", "        release_this_conn = release_conn", "    ", "        http_tunnel_required = connection_requires_http_tunnel(", "            self.proxy, self.proxy_config, destination_scheme", "        )", "    ", "        # Merge the proxy headers. Only done when not using HTTP CONNECT. We", "        # have to copy the headers dict so we can safely change it without those", "        # changes being reflected in anyone else's copy.", "        if not http_tunnel_required:", "            headers = headers.copy()", "            headers.update(self.proxy_headers)", "    ", "        # Must keep the exception bound to a separate variable or else Python 3", "        # complains about UnboundLocalError.", "        err = None", "    ", "        # Keep track of whether we cleanly exited the except block. This", "        # ensures we do proper cleanup in finally.", "        clean_exit = False", "    ", "        # Rewind body position, if needed. Record current position", "        # for future rewinds in the event of a redirect/retry.", "        body_pos = set_file_position(body, body_pos)", "    ", "        try:", "            # Request a connection from the queue.", "            timeout_obj = self._get_timeout(timeout)", "            conn = self._get_conn(timeout=pool_timeout)", "    ", "            conn.timeout = timeout_obj.connect_timeout", "    ", "            is_new_proxy_conn = self.proxy is not None and not getattr(", "                conn, \"sock\", None", "            )", "            if is_new_proxy_conn and http_tunnel_required:", "                self._prepare_proxy(conn)", "    ", "            # Make the request on the httplib connection object.", ">           httplib_response = self._make_request(", "                conn,", "                method,", "                url,", "                timeout=timeout_obj,", "                body=body,", "                headers=headers,", "                chunked=chunked,", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bc30640>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["retries", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["redirect", "False"], ["assert_same_host", "False"], ["timeout", "<object object at 0x107f60b10>"], ["pool_timeout", "None"], ["release_conn", "True"], ["chunked", "False"], ["body_pos", "None"], ["response_kw", "{'request_url': 'http://localhost:4723/wd/hub/session'}"], ["parsed_url", "Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)"], ["destination_scheme", "None"], ["conn", "None"], ["release_this_conn", "True"], ["http_tunnel_required", "False"], ["err", "None"], ["clean_exit", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 703, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _make_request(", "        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw", "    ):", "        \"\"\"", "        Perform a request on a given urllib connection object taken from our", "        pool.", "    ", "        :param conn:", "            a connection from one of our connection pools", "    ", "        :param timeout:", "            Socket timeout in seconds for the request. This can be a", "            float or integer, which will set the same timeout value for", "            the socket connect and the socket read, or an instance of", "            :class:`urllib3.util.Timeout`, which gives you more fine-grained", "            control over your timeouts.", "        \"\"\"", "        self.num_requests += 1", "    ", "        timeout_obj = self._get_timeout(timeout)", "        timeout_obj.start_connect()", "        conn.timeout = timeout_obj.connect_timeout", "    ", "        # Trigger any extra validation we need to do.", "        try:", "            self._validate_conn(conn)", "        except (SocketTimeout, BaseSSLError) as e:", "            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.", "            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)", "            raise", "    ", "        # conn.request() calls http.client.*.request, not the method in", "        # urllib3.request. It also calls makefile (recv) on the socket.", "        try:", "            if chunked:", "                conn.request_chunked(method, url, **httplib_request_kw)", "            else:", ">               conn.request(method, url, **httplib_request_kw)"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bc30640>"], ["conn", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["timeout", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"], ["chunked", "False"], ["httplib_request_kw", "{'body': '{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformV...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}}"], ["timeout_obj", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 398, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers=None):", "        if headers is None:", "            headers = {}", "        else:", "            # Avoid modifying the headers passed into .request()", "            headers = headers.copy()", "        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):", "            headers[\"User-Agent\"] = _get_default_user_agent()", ">       super(HTTPConnection, self).request(method, url, body=body, headers=headers)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 239, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers={}, *,", "                encode_chunked=False):", "        \"\"\"Send a complete request to the server.\"\"\"", ">       self._send_request(method, url, body, headers, encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1285, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_request(self, method, url, body, headers, encode_chunked):", "        # Honor explicitly requested Host: and Accept-Encoding: headers.", "        header_names = frozenset(k.lower() for k in headers)", "        skips = {}", "        if 'host' in header_names:", "            skips['skip_host'] = 1", "        if 'accept-encoding' in header_names:", "            skips['skip_accept_encoding'] = 1", "    ", "        self.putrequest(method, url, **skips)", "    ", "        # chunked encoding will happen if HTTP/1.1 is used and either", "        # the caller passes encode_chunked=True or the following", "        # conditions hold:", "        # 1. content-length has not been explicitly set", "        # 2. the body is a file or iterable, but not a str or bytes-like", "        # 3. Transfer-Encoding has NOT been explicitly set by the caller", "    ", "        if 'content-length' not in header_names:", "            # only chunk body if not explicitly set for backwards", "            # compatibility, assuming the client code is already handling the", "            # chunking", "            if 'transfer-encoding' not in header_names:", "                # if content-length cannot be automatically determined, fall", "                # back to chunked encoding", "                encode_chunked = False", "                content_length = self._get_content_length(body, method)", "                if content_length is None:", "                    if body is not None:", "                        if self.debuglevel > 0:", "                            print('Unable to determine size of %r' % body)", "                        encode_chunked = True", "                        self.putheader('Transfer-Encoding', 'chunked')", "                else:", "                    self.putheader('Content-Length', str(content_length))", "        else:", "            encode_chunked = False", "    ", "        for hdr, value in headers.items():", "            self.putheader(hdr, value)", "        if isinstance(body, str):", "            # RFC 2616 Section 3.7.1 says that text default has a", "            # default charset of iso-8859-1.", "            body = _encode(body, 'body')", ">       self.endheaders(body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1331, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def endheaders(self, message_body=None, *, encode_chunked=False):", "        \"\"\"Indicate that the last header line has been sent to the server.", "    ", "        This method sends the request to the server.  The optional message_body", "        argument can be used to pass a message body associated with the", "        request.", "        \"\"\"", "        if self.__state == _CS_REQ_STARTED:", "            self.__state = _CS_REQ_SENT", "        else:", "            raise CannotSendHeader()", ">       self._send_output(message_body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1280, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_output(self, message_body=None, encode_chunked=False):", "        \"\"\"Send the currently buffered request and clear the buffer.", "    ", "        Appends an extra \\\\r\\\\n to the buffer.", "        A message_body may be specified, to be appended to the request.", "        \"\"\"", "        self._buffer.extend((b\"\", b\"\"))", "        msg = b\"\\r\\n\".join(self._buffer)", "        del self._buffer[:]", ">       self.send(msg)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1040, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def send(self, data):", "        \"\"\"Send `data' to the server.", "        ``data`` can be a string object, a bytes object, an array object, a", "        file-like object that supports a .read() method, or an iterable object.", "        \"\"\"", "    ", "        if self.sock is None:", "            if self.auto_open:", ">               self.connect()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"], ["data", "b'POST /wd/hub/session HTTP/1.1\\r\\nHost: localhost:4723\\r\\nAccept-Encoding: identity\\r\\nContent-Length: 1219\\r\\nAccept...enium/4.1.3 (python mac))\\r\\nConnection: keep-alive\\r\\nX-Idempotency-Key: d6122407-0e25-423a-8061-d4c8bdf9d1ce\\r\\n\\r\\n'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 980, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def connect(self):", ">       conn = self._new_conn()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 205, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", "            conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )", "    ", "        except SocketTimeout:", "            raise ConnectTimeoutError(", "                self,", "                \"Connection to %s timed out. (connect timeout=%s)\"", "                % (self.host, self.timeout),", "            )", "    ", "        except SocketError as e:", ">           raise NewConnectionError(", "                self, \"Failed to establish a new connection: %s\" % e", "            )", "E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12bc300a0>: Failed to establish a new connection: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc300a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "NewConnectionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12bc300a0>: Failed to establish a new connection: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882a90>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc300a0>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc300a0>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bc30640>"], ["_stacktrace", "<traceback object at 0x12bcc4200>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc300a0>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, null]]}, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc303d0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc30310>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc302e0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.005867047000000181, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_crop_rotate_flip", "location": ["tests/YCP/photo_edit_page_test.py", 40, "Test.test_edit_crop_rotate_flip"], "keywords": {"test_edit_crop_rotate_flip": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc303d0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc30310>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc302e0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.0003738320000001849, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_crop_rotate_m90", "location": ["tests/YCP/photo_edit_page_test.py", 20, "Test.test_edit_crop_rotate_m90"], "keywords": {"test_edit_crop_rotate_m90": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x125a6ecd0>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x1258827f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x125a6ecd0>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x125a6ecd0>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bde05b0>"], ["_stacktrace", "<traceback object at 0x12bc7d900>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", ">           conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 174, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", "                sock.connect(sa)", "                return sock", "    ", "            except socket.error as e:", "                err = e", "                if sock is not None:", "                    sock.close()", "                    sock = None", "    ", "        if err is not None:", ">           raise err"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 95, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", ">               sock.connect(sa)", "E               ConnectionRefusedError: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def urlopen(", "        self,", "        method,", "        url,", "        body=None,", "        headers=None,", "        retries=None,", "        redirect=True,", "        assert_same_host=True,", "        timeout=_Default,", "        pool_timeout=None,", "        release_conn=None,", "        chunked=False,", "        body_pos=None,", "        **response_kw", "    ):", "        \"\"\"", "        Get a connection from the pool and perform an HTTP request. This is the", "        lowest level call for making a request, so you'll need to specify all", "        the raw details.", "    ", "        .. note::", "    ", "           More commonly, it's appropriate to use a convenience method provided", "           by :class:`.RequestMethods`, such as :meth:`request`.", "    ", "        .. note::", "    ", "           `release_conn` will only behave as expected if", "           `preload_content=False` because we want to make", "           `preload_content=False` the default behaviour someday soon without", "           breaking backwards compatibility.", "    ", "        :param method:", "            HTTP request method (such as GET, POST, PUT, etc.)", "    ", "        :param url:", "            The URL to perform the request on.", "    ", "        :param body:", "            Data to send in the request body, either :class:`str`, :class:`bytes`,", "            an iterable of :class:`str`/:class:`bytes`, or a file-like object.", "    ", "        :param headers:", "            Dictionary of custom headers to send, such as User-Agent,", "            If-None-Match, etc. If None, pool headers are used. If provided,", "            these headers completely replace any pool-specific headers.", "    ", "        :param retries:", "            Configure the number of retries to allow before raising a", "            :class:`~urllib3.exceptions.MaxRetryError` exception.", "    ", "            Pass ``None`` to retry until you receive a response. Pass a", "            :class:`~urllib3.util.retry.Retry` object for fine-grained control", "            over different types of retries.", "            Pass an integer number to retry connection errors that many times,", "            but no other types of errors. Pass zero to never retry.", "    ", "            If ``False``, then retries are disabled and any exception is raised", "            immediately. Also, instead of raising a MaxRetryError on redirects,", "            the redirect response will be returned.", "    ", "        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.", "    ", "        :param redirect:", "            If True, automatically handle redirects (status codes 301, 302,", "            303, 307, 308). Each redirect counts as a retry. Disabling retries", "            will disable redirect, too.", "    ", "        :param assert_same_host:", "            If ``True``, will make sure that the host of the pool requests is", "            consistent else will raise HostChangedError. When ``False``, you can", "            use the pool on an HTTP proxy and request foreign hosts.", "    ", "        :param timeout:", "            If specified, overrides the default timeout for this one", "            request. It may be a float (in seconds) or an instance of", "            :class:`urllib3.util.Timeout`.", "    ", "        :param pool_timeout:", "            If set and the pool is set to block=True, then this method will", "            block for ``pool_timeout`` seconds and raise EmptyPoolError if no", "            connection is available within the time period.", "    ", "        :param release_conn:", "            If False, then the urlopen call will not release the connection", "            back into the pool once a response is received (but will release if", "            you read the entire contents of the response such as when", "            `preload_content=True`). This is useful if you're not preloading", "            the response's content immediately. You will need to call", "            ``r.release_conn()`` on the response ``r`` to return the connection", "            back into the pool. If None, it takes the value of", "            ``response_kw.get('preload_content', True)``.", "    ", "        :param chunked:", "            If True, urllib3 will send the body using chunked transfer", "            encoding. Otherwise, urllib3 will send the body using the standard", "            content-length form. Defaults to False.", "    ", "        :param int body_pos:", "            Position to seek to in file-like body in the event of a retry or", "            redirect. Typically this won't need to be set because urllib3 will", "            auto-populate the value when needed.", "    ", "        :param \\\\**response_kw:", "            Additional parameters are passed to", "            :meth:`urllib3.response.HTTPResponse.from_httplib`", "        \"\"\"", "    ", "        parsed_url = parse_url(url)", "        destination_scheme = parsed_url.scheme", "    ", "        if headers is None:", "            headers = self.headers", "    ", "        if not isinstance(retries, Retry):", "            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)", "    ", "        if release_conn is None:", "            release_conn = response_kw.get(\"preload_content\", True)", "    ", "        # Check host", "        if assert_same_host and not self.is_same_host(url):", "            raise HostChangedError(self, url, retries)", "    ", "        # Ensure that the URL we're connecting to is properly encoded", "        if url.startswith(\"/\"):", "            url = six.ensure_str(_encode_target(url))", "        else:", "            url = six.ensure_str(parsed_url.url)", "    ", "        conn = None", "    ", "        # Track whether `conn` needs to be released before", "        # returning/raising/recursing. Update this variable if necessary, and", "        # leave `release_conn` constant throughout the function. That way, if", "        # the function recurses, the original value of `release_conn` will be", "        # passed down into the recursive call, and its value will be respected.", "        #", "        # See issue #651 [1] for details.", "        #", "        # [1] <https://github.com/urllib3/urllib3/issues/651>", "        release_this_conn = release_conn", "    ", "        http_tunnel_required = connection_requires_http_tunnel(", "            self.proxy, self.proxy_config, destination_scheme", "        )", "    ", "        # Merge the proxy headers. Only done when not using HTTP CONNECT. We", "        # have to copy the headers dict so we can safely change it without those", "        # changes being reflected in anyone else's copy.", "        if not http_tunnel_required:", "            headers = headers.copy()", "            headers.update(self.proxy_headers)", "    ", "        # Must keep the exception bound to a separate variable or else Python 3", "        # complains about UnboundLocalError.", "        err = None", "    ", "        # Keep track of whether we cleanly exited the except block. This", "        # ensures we do proper cleanup in finally.", "        clean_exit = False", "    ", "        # Rewind body position, if needed. Record current position", "        # for future rewinds in the event of a redirect/retry.", "        body_pos = set_file_position(body, body_pos)", "    ", "        try:", "            # Request a connection from the queue.", "            timeout_obj = self._get_timeout(timeout)", "            conn = self._get_conn(timeout=pool_timeout)", "    ", "            conn.timeout = timeout_obj.connect_timeout", "    ", "            is_new_proxy_conn = self.proxy is not None and not getattr(", "                conn, \"sock\", None", "            )", "            if is_new_proxy_conn and http_tunnel_required:", "                self._prepare_proxy(conn)", "    ", "            # Make the request on the httplib connection object.", ">           httplib_response = self._make_request(", "                conn,", "                method,", "                url,", "                timeout=timeout_obj,", "                body=body,", "                headers=headers,", "                chunked=chunked,", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bde05b0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["retries", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["redirect", "False"], ["assert_same_host", "False"], ["timeout", "<object object at 0x107f60b10>"], ["pool_timeout", "None"], ["release_conn", "True"], ["chunked", "False"], ["body_pos", "None"], ["response_kw", "{'request_url': 'http://localhost:4723/wd/hub/session'}"], ["parsed_url", "Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)"], ["destination_scheme", "None"], ["conn", "None"], ["release_this_conn", "True"], ["http_tunnel_required", "False"], ["err", "None"], ["clean_exit", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 703, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _make_request(", "        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw", "    ):", "        \"\"\"", "        Perform a request on a given urllib connection object taken from our", "        pool.", "    ", "        :param conn:", "            a connection from one of our connection pools", "    ", "        :param timeout:", "            Socket timeout in seconds for the request. This can be a", "            float or integer, which will set the same timeout value for", "            the socket connect and the socket read, or an instance of", "            :class:`urllib3.util.Timeout`, which gives you more fine-grained", "            control over your timeouts.", "        \"\"\"", "        self.num_requests += 1", "    ", "        timeout_obj = self._get_timeout(timeout)", "        timeout_obj.start_connect()", "        conn.timeout = timeout_obj.connect_timeout", "    ", "        # Trigger any extra validation we need to do.", "        try:", "            self._validate_conn(conn)", "        except (SocketTimeout, BaseSSLError) as e:", "            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.", "            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)", "            raise", "    ", "        # conn.request() calls http.client.*.request, not the method in", "        # urllib3.request. It also calls makefile (recv) on the socket.", "        try:", "            if chunked:", "                conn.request_chunked(method, url, **httplib_request_kw)", "            else:", ">               conn.request(method, url, **httplib_request_kw)"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bde05b0>"], ["conn", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["timeout", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"], ["chunked", "False"], ["httplib_request_kw", "{'body': '{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformV...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}}"], ["timeout_obj", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 398, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers=None):", "        if headers is None:", "            headers = {}", "        else:", "            # Avoid modifying the headers passed into .request()", "            headers = headers.copy()", "        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):", "            headers[\"User-Agent\"] = _get_default_user_agent()", ">       super(HTTPConnection, self).request(method, url, body=body, headers=headers)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 239, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers={}, *,", "                encode_chunked=False):", "        \"\"\"Send a complete request to the server.\"\"\"", ">       self._send_request(method, url, body, headers, encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1285, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_request(self, method, url, body, headers, encode_chunked):", "        # Honor explicitly requested Host: and Accept-Encoding: headers.", "        header_names = frozenset(k.lower() for k in headers)", "        skips = {}", "        if 'host' in header_names:", "            skips['skip_host'] = 1", "        if 'accept-encoding' in header_names:", "            skips['skip_accept_encoding'] = 1", "    ", "        self.putrequest(method, url, **skips)", "    ", "        # chunked encoding will happen if HTTP/1.1 is used and either", "        # the caller passes encode_chunked=True or the following", "        # conditions hold:", "        # 1. content-length has not been explicitly set", "        # 2. the body is a file or iterable, but not a str or bytes-like", "        # 3. Transfer-Encoding has NOT been explicitly set by the caller", "    ", "        if 'content-length' not in header_names:", "            # only chunk body if not explicitly set for backwards", "            # compatibility, assuming the client code is already handling the", "            # chunking", "            if 'transfer-encoding' not in header_names:", "                # if content-length cannot be automatically determined, fall", "                # back to chunked encoding", "                encode_chunked = False", "                content_length = self._get_content_length(body, method)", "                if content_length is None:", "                    if body is not None:", "                        if self.debuglevel > 0:", "                            print('Unable to determine size of %r' % body)", "                        encode_chunked = True", "                        self.putheader('Transfer-Encoding', 'chunked')", "                else:", "                    self.putheader('Content-Length', str(content_length))", "        else:", "            encode_chunked = False", "    ", "        for hdr, value in headers.items():", "            self.putheader(hdr, value)", "        if isinstance(body, str):", "            # RFC 2616 Section 3.7.1 says that text default has a", "            # default charset of iso-8859-1.", "            body = _encode(body, 'body')", ">       self.endheaders(body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1331, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def endheaders(self, message_body=None, *, encode_chunked=False):", "        \"\"\"Indicate that the last header line has been sent to the server.", "    ", "        This method sends the request to the server.  The optional message_body", "        argument can be used to pass a message body associated with the", "        request.", "        \"\"\"", "        if self.__state == _CS_REQ_STARTED:", "            self.__state = _CS_REQ_SENT", "        else:", "            raise CannotSendHeader()", ">       self._send_output(message_body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1280, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_output(self, message_body=None, encode_chunked=False):", "        \"\"\"Send the currently buffered request and clear the buffer.", "    ", "        Appends an extra \\\\r\\\\n to the buffer.", "        A message_body may be specified, to be appended to the request.", "        \"\"\"", "        self._buffer.extend((b\"\", b\"\"))", "        msg = b\"\\r\\n\".join(self._buffer)", "        del self._buffer[:]", ">       self.send(msg)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1040, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def send(self, data):", "        \"\"\"Send `data' to the server.", "        ``data`` can be a string object, a bytes object, an array object, a", "        file-like object that supports a .read() method, or an iterable object.", "        \"\"\"", "    ", "        if self.sock is None:", "            if self.auto_open:", ">               self.connect()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"], ["data", "b'POST /wd/hub/session HTTP/1.1\\r\\nHost: localhost:4723\\r\\nAccept-Encoding: identity\\r\\nContent-Length: 1219\\r\\nAccept...enium/4.1.3 (python mac))\\r\\nConnection: keep-alive\\r\\nX-Idempotency-Key: 8d7db936-9157-42ae-a2b0-9ccc35b11939\\r\\n\\r\\n'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 980, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def connect(self):", ">       conn = self._new_conn()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 205, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", "            conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )", "    ", "        except SocketTimeout:", "            raise ConnectTimeoutError(", "                self,", "                \"Connection to %s timed out. (connect timeout=%s)\"", "                % (self.host, self.timeout),", "            )", "    ", "        except SocketError as e:", ">           raise NewConnectionError(", "                self, \"Failed to establish a new connection: %s\" % e", "            )", "E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x125a6ecd0>: Failed to establish a new connection: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x125a6ecd0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "NewConnectionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x125a6ecd0>: Failed to establish a new connection: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x1258827f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x125a6ecd0>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x125a6ecd0>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bde05b0>"], ["_stacktrace", "<traceback object at 0x12bc7d900>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x125a6ecd0>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, null]]}, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bde02e0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bde01f0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bde00a0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.00562101100000012, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_crop_rotate_m90", "location": ["tests/YCP/photo_edit_page_test.py", 20, "Test.test_edit_crop_rotate_m90"], "keywords": {"test_edit_crop_rotate_m90": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bde02e0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bde01f0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bde00a0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.00024002600000017082, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_crop_rotate_reset", "location": ["tests/YCP/photo_edit_page_test.py", 50, "Test.test_edit_crop_rotate_reset"], "keywords": {"test_edit_crop_rotate_reset": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc6ff10>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882be0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc6ff10>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc6ff10>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd70610>"], ["_stacktrace", "<traceback object at 0x12bd77480>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", ">           conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 174, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", "                sock.connect(sa)", "                return sock", "    ", "            except socket.error as e:", "                err = e", "                if sock is not None:", "                    sock.close()", "                    sock = None", "    ", "        if err is not None:", ">           raise err"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 95, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", ">               sock.connect(sa)", "E               ConnectionRefusedError: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def urlopen(", "        self,", "        method,", "        url,", "        body=None,", "        headers=None,", "        retries=None,", "        redirect=True,", "        assert_same_host=True,", "        timeout=_Default,", "        pool_timeout=None,", "        release_conn=None,", "        chunked=False,", "        body_pos=None,", "        **response_kw", "    ):", "        \"\"\"", "        Get a connection from the pool and perform an HTTP request. This is the", "        lowest level call for making a request, so you'll need to specify all", "        the raw details.", "    ", "        .. note::", "    ", "           More commonly, it's appropriate to use a convenience method provided", "           by :class:`.RequestMethods`, such as :meth:`request`.", "    ", "        .. note::", "    ", "           `release_conn` will only behave as expected if", "           `preload_content=False` because we want to make", "           `preload_content=False` the default behaviour someday soon without", "           breaking backwards compatibility.", "    ", "        :param method:", "            HTTP request method (such as GET, POST, PUT, etc.)", "    ", "        :param url:", "            The URL to perform the request on.", "    ", "        :param body:", "            Data to send in the request body, either :class:`str`, :class:`bytes`,", "            an iterable of :class:`str`/:class:`bytes`, or a file-like object.", "    ", "        :param headers:", "            Dictionary of custom headers to send, such as User-Agent,", "            If-None-Match, etc. If None, pool headers are used. If provided,", "            these headers completely replace any pool-specific headers.", "    ", "        :param retries:", "            Configure the number of retries to allow before raising a", "            :class:`~urllib3.exceptions.MaxRetryError` exception.", "    ", "            Pass ``None`` to retry until you receive a response. Pass a", "            :class:`~urllib3.util.retry.Retry` object for fine-grained control", "            over different types of retries.", "            Pass an integer number to retry connection errors that many times,", "            but no other types of errors. Pass zero to never retry.", "    ", "            If ``False``, then retries are disabled and any exception is raised", "            immediately. Also, instead of raising a MaxRetryError on redirects,", "            the redirect response will be returned.", "    ", "        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.", "    ", "        :param redirect:", "            If True, automatically handle redirects (status codes 301, 302,", "            303, 307, 308). Each redirect counts as a retry. Disabling retries", "            will disable redirect, too.", "    ", "        :param assert_same_host:", "            If ``True``, will make sure that the host of the pool requests is", "            consistent else will raise HostChangedError. When ``False``, you can", "            use the pool on an HTTP proxy and request foreign hosts.", "    ", "        :param timeout:", "            If specified, overrides the default timeout for this one", "            request. It may be a float (in seconds) or an instance of", "            :class:`urllib3.util.Timeout`.", "    ", "        :param pool_timeout:", "            If set and the pool is set to block=True, then this method will", "            block for ``pool_timeout`` seconds and raise EmptyPoolError if no", "            connection is available within the time period.", "    ", "        :param release_conn:", "            If False, then the urlopen call will not release the connection", "            back into the pool once a response is received (but will release if", "            you read the entire contents of the response such as when", "            `preload_content=True`). This is useful if you're not preloading", "            the response's content immediately. You will need to call", "            ``r.release_conn()`` on the response ``r`` to return the connection", "            back into the pool. If None, it takes the value of", "            ``response_kw.get('preload_content', True)``.", "    ", "        :param chunked:", "            If True, urllib3 will send the body using chunked transfer", "            encoding. Otherwise, urllib3 will send the body using the standard", "            content-length form. Defaults to False.", "    ", "        :param int body_pos:", "            Position to seek to in file-like body in the event of a retry or", "            redirect. Typically this won't need to be set because urllib3 will", "            auto-populate the value when needed.", "    ", "        :param \\\\**response_kw:", "            Additional parameters are passed to", "            :meth:`urllib3.response.HTTPResponse.from_httplib`", "        \"\"\"", "    ", "        parsed_url = parse_url(url)", "        destination_scheme = parsed_url.scheme", "    ", "        if headers is None:", "            headers = self.headers", "    ", "        if not isinstance(retries, Retry):", "            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)", "    ", "        if release_conn is None:", "            release_conn = response_kw.get(\"preload_content\", True)", "    ", "        # Check host", "        if assert_same_host and not self.is_same_host(url):", "            raise HostChangedError(self, url, retries)", "    ", "        # Ensure that the URL we're connecting to is properly encoded", "        if url.startswith(\"/\"):", "            url = six.ensure_str(_encode_target(url))", "        else:", "            url = six.ensure_str(parsed_url.url)", "    ", "        conn = None", "    ", "        # Track whether `conn` needs to be released before", "        # returning/raising/recursing. Update this variable if necessary, and", "        # leave `release_conn` constant throughout the function. That way, if", "        # the function recurses, the original value of `release_conn` will be", "        # passed down into the recursive call, and its value will be respected.", "        #", "        # See issue #651 [1] for details.", "        #", "        # [1] <https://github.com/urllib3/urllib3/issues/651>", "        release_this_conn = release_conn", "    ", "        http_tunnel_required = connection_requires_http_tunnel(", "            self.proxy, self.proxy_config, destination_scheme", "        )", "    ", "        # Merge the proxy headers. Only done when not using HTTP CONNECT. We", "        # have to copy the headers dict so we can safely change it without those", "        # changes being reflected in anyone else's copy.", "        if not http_tunnel_required:", "            headers = headers.copy()", "            headers.update(self.proxy_headers)", "    ", "        # Must keep the exception bound to a separate variable or else Python 3", "        # complains about UnboundLocalError.", "        err = None", "    ", "        # Keep track of whether we cleanly exited the except block. This", "        # ensures we do proper cleanup in finally.", "        clean_exit = False", "    ", "        # Rewind body position, if needed. Record current position", "        # for future rewinds in the event of a redirect/retry.", "        body_pos = set_file_position(body, body_pos)", "    ", "        try:", "            # Request a connection from the queue.", "            timeout_obj = self._get_timeout(timeout)", "            conn = self._get_conn(timeout=pool_timeout)", "    ", "            conn.timeout = timeout_obj.connect_timeout", "    ", "            is_new_proxy_conn = self.proxy is not None and not getattr(", "                conn, \"sock\", None", "            )", "            if is_new_proxy_conn and http_tunnel_required:", "                self._prepare_proxy(conn)", "    ", "            # Make the request on the httplib connection object.", ">           httplib_response = self._make_request(", "                conn,", "                method,", "                url,", "                timeout=timeout_obj,", "                body=body,", "                headers=headers,", "                chunked=chunked,", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd70610>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["retries", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["redirect", "False"], ["assert_same_host", "False"], ["timeout", "<object object at 0x107f60b10>"], ["pool_timeout", "None"], ["release_conn", "True"], ["chunked", "False"], ["body_pos", "None"], ["response_kw", "{'request_url': 'http://localhost:4723/wd/hub/session'}"], ["parsed_url", "Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)"], ["destination_scheme", "None"], ["conn", "None"], ["release_this_conn", "True"], ["http_tunnel_required", "False"], ["err", "None"], ["clean_exit", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 703, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _make_request(", "        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw", "    ):", "        \"\"\"", "        Perform a request on a given urllib connection object taken from our", "        pool.", "    ", "        :param conn:", "            a connection from one of our connection pools", "    ", "        :param timeout:", "            Socket timeout in seconds for the request. This can be a", "            float or integer, which will set the same timeout value for", "            the socket connect and the socket read, or an instance of", "            :class:`urllib3.util.Timeout`, which gives you more fine-grained", "            control over your timeouts.", "        \"\"\"", "        self.num_requests += 1", "    ", "        timeout_obj = self._get_timeout(timeout)", "        timeout_obj.start_connect()", "        conn.timeout = timeout_obj.connect_timeout", "    ", "        # Trigger any extra validation we need to do.", "        try:", "            self._validate_conn(conn)", "        except (SocketTimeout, BaseSSLError) as e:", "            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.", "            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)", "            raise", "    ", "        # conn.request() calls http.client.*.request, not the method in", "        # urllib3.request. It also calls makefile (recv) on the socket.", "        try:", "            if chunked:", "                conn.request_chunked(method, url, **httplib_request_kw)", "            else:", ">               conn.request(method, url, **httplib_request_kw)"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd70610>"], ["conn", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["timeout", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"], ["chunked", "False"], ["httplib_request_kw", "{'body': '{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformV...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}}"], ["timeout_obj", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 398, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers=None):", "        if headers is None:", "            headers = {}", "        else:", "            # Avoid modifying the headers passed into .request()", "            headers = headers.copy()", "        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):", "            headers[\"User-Agent\"] = _get_default_user_agent()", ">       super(HTTPConnection, self).request(method, url, body=body, headers=headers)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 239, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers={}, *,", "                encode_chunked=False):", "        \"\"\"Send a complete request to the server.\"\"\"", ">       self._send_request(method, url, body, headers, encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1285, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_request(self, method, url, body, headers, encode_chunked):", "        # Honor explicitly requested Host: and Accept-Encoding: headers.", "        header_names = frozenset(k.lower() for k in headers)", "        skips = {}", "        if 'host' in header_names:", "            skips['skip_host'] = 1", "        if 'accept-encoding' in header_names:", "            skips['skip_accept_encoding'] = 1", "    ", "        self.putrequest(method, url, **skips)", "    ", "        # chunked encoding will happen if HTTP/1.1 is used and either", "        # the caller passes encode_chunked=True or the following", "        # conditions hold:", "        # 1. content-length has not been explicitly set", "        # 2. the body is a file or iterable, but not a str or bytes-like", "        # 3. Transfer-Encoding has NOT been explicitly set by the caller", "    ", "        if 'content-length' not in header_names:", "            # only chunk body if not explicitly set for backwards", "            # compatibility, assuming the client code is already handling the", "            # chunking", "            if 'transfer-encoding' not in header_names:", "                # if content-length cannot be automatically determined, fall", "                # back to chunked encoding", "                encode_chunked = False", "                content_length = self._get_content_length(body, method)", "                if content_length is None:", "                    if body is not None:", "                        if self.debuglevel > 0:", "                            print('Unable to determine size of %r' % body)", "                        encode_chunked = True", "                        self.putheader('Transfer-Encoding', 'chunked')", "                else:", "                    self.putheader('Content-Length', str(content_length))", "        else:", "            encode_chunked = False", "    ", "        for hdr, value in headers.items():", "            self.putheader(hdr, value)", "        if isinstance(body, str):", "            # RFC 2616 Section 3.7.1 says that text default has a", "            # default charset of iso-8859-1.", "            body = _encode(body, 'body')", ">       self.endheaders(body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1331, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def endheaders(self, message_body=None, *, encode_chunked=False):", "        \"\"\"Indicate that the last header line has been sent to the server.", "    ", "        This method sends the request to the server.  The optional message_body", "        argument can be used to pass a message body associated with the", "        request.", "        \"\"\"", "        if self.__state == _CS_REQ_STARTED:", "            self.__state = _CS_REQ_SENT", "        else:", "            raise CannotSendHeader()", ">       self._send_output(message_body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1280, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_output(self, message_body=None, encode_chunked=False):", "        \"\"\"Send the currently buffered request and clear the buffer.", "    ", "        Appends an extra \\\\r\\\\n to the buffer.", "        A message_body may be specified, to be appended to the request.", "        \"\"\"", "        self._buffer.extend((b\"\", b\"\"))", "        msg = b\"\\r\\n\".join(self._buffer)", "        del self._buffer[:]", ">       self.send(msg)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1040, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def send(self, data):", "        \"\"\"Send `data' to the server.", "        ``data`` can be a string object, a bytes object, an array object, a", "        file-like object that supports a .read() method, or an iterable object.", "        \"\"\"", "    ", "        if self.sock is None:", "            if self.auto_open:", ">               self.connect()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"], ["data", "b'POST /wd/hub/session HTTP/1.1\\r\\nHost: localhost:4723\\r\\nAccept-Encoding: identity\\r\\nContent-Length: 1219\\r\\nAccept...enium/4.1.3 (python mac))\\r\\nConnection: keep-alive\\r\\nX-Idempotency-Key: e9a001eb-dcc0-4c25-85fa-55e833a2a822\\r\\n\\r\\n'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 980, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def connect(self):", ">       conn = self._new_conn()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 205, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", "            conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )", "    ", "        except SocketTimeout:", "            raise ConnectTimeoutError(", "                self,", "                \"Connection to %s timed out. (connect timeout=%s)\"", "                % (self.host, self.timeout),", "            )", "    ", "        except SocketError as e:", ">           raise NewConnectionError(", "                self, \"Failed to establish a new connection: %s\" % e", "            )", "E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12bc6ff10>: Failed to establish a new connection: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bc6ff10>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "NewConnectionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12bc6ff10>: Failed to establish a new connection: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882be0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc6ff10>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc6ff10>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd70610>"], ["_stacktrace", "<traceback object at 0x12bd77480>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc6ff10>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, null]]}, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd703d0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd70310>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd700a0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.005553972000000407, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_crop_rotate_reset", "location": ["tests/YCP/photo_edit_page_test.py", 50, "Test.test_edit_crop_rotate_reset"], "keywords": {"test_edit_crop_rotate_reset": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd703d0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd70310>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd700a0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.00023261500000026913, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_mirror_offset", "location": ["tests/YCP/photo_edit_page_test.py", 78, "Test.test_edit_mirror_offset"], "keywords": {"test_edit_mirror_offset": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12be0b400>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882fd0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12be0b400>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12be0b400>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bc65e50>"], ["_stacktrace", "<traceback object at 0x12be23740>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", ">           conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 174, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", "                sock.connect(sa)", "                return sock", "    ", "            except socket.error as e:", "                err = e", "                if sock is not None:", "                    sock.close()", "                    sock = None", "    ", "        if err is not None:", ">           raise err"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 95, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", ">               sock.connect(sa)", "E               ConnectionRefusedError: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def urlopen(", "        self,", "        method,", "        url,", "        body=None,", "        headers=None,", "        retries=None,", "        redirect=True,", "        assert_same_host=True,", "        timeout=_Default,", "        pool_timeout=None,", "        release_conn=None,", "        chunked=False,", "        body_pos=None,", "        **response_kw", "    ):", "        \"\"\"", "        Get a connection from the pool and perform an HTTP request. This is the", "        lowest level call for making a request, so you'll need to specify all", "        the raw details.", "    ", "        .. note::", "    ", "           More commonly, it's appropriate to use a convenience method provided", "           by :class:`.RequestMethods`, such as :meth:`request`.", "    ", "        .. note::", "    ", "           `release_conn` will only behave as expected if", "           `preload_content=False` because we want to make", "           `preload_content=False` the default behaviour someday soon without", "           breaking backwards compatibility.", "    ", "        :param method:", "            HTTP request method (such as GET, POST, PUT, etc.)", "    ", "        :param url:", "            The URL to perform the request on.", "    ", "        :param body:", "            Data to send in the request body, either :class:`str`, :class:`bytes`,", "            an iterable of :class:`str`/:class:`bytes`, or a file-like object.", "    ", "        :param headers:", "            Dictionary of custom headers to send, such as User-Agent,", "            If-None-Match, etc. If None, pool headers are used. If provided,", "            these headers completely replace any pool-specific headers.", "    ", "        :param retries:", "            Configure the number of retries to allow before raising a", "            :class:`~urllib3.exceptions.MaxRetryError` exception.", "    ", "            Pass ``None`` to retry until you receive a response. Pass a", "            :class:`~urllib3.util.retry.Retry` object for fine-grained control", "            over different types of retries.", "            Pass an integer number to retry connection errors that many times,", "            but no other types of errors. Pass zero to never retry.", "    ", "            If ``False``, then retries are disabled and any exception is raised", "            immediately. Also, instead of raising a MaxRetryError on redirects,", "            the redirect response will be returned.", "    ", "        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.", "    ", "        :param redirect:", "            If True, automatically handle redirects (status codes 301, 302,", "            303, 307, 308). Each redirect counts as a retry. Disabling retries", "            will disable redirect, too.", "    ", "        :param assert_same_host:", "            If ``True``, will make sure that the host of the pool requests is", "            consistent else will raise HostChangedError. When ``False``, you can", "            use the pool on an HTTP proxy and request foreign hosts.", "    ", "        :param timeout:", "            If specified, overrides the default timeout for this one", "            request. It may be a float (in seconds) or an instance of", "            :class:`urllib3.util.Timeout`.", "    ", "        :param pool_timeout:", "            If set and the pool is set to block=True, then this method will", "            block for ``pool_timeout`` seconds and raise EmptyPoolError if no", "            connection is available within the time period.", "    ", "        :param release_conn:", "            If False, then the urlopen call will not release the connection", "            back into the pool once a response is received (but will release if", "            you read the entire contents of the response such as when", "            `preload_content=True`). This is useful if you're not preloading", "            the response's content immediately. You will need to call", "            ``r.release_conn()`` on the response ``r`` to return the connection", "            back into the pool. If None, it takes the value of", "            ``response_kw.get('preload_content', True)``.", "    ", "        :param chunked:", "            If True, urllib3 will send the body using chunked transfer", "            encoding. Otherwise, urllib3 will send the body using the standard", "            content-length form. Defaults to False.", "    ", "        :param int body_pos:", "            Position to seek to in file-like body in the event of a retry or", "            redirect. Typically this won't need to be set because urllib3 will", "            auto-populate the value when needed.", "    ", "        :param \\\\**response_kw:", "            Additional parameters are passed to", "            :meth:`urllib3.response.HTTPResponse.from_httplib`", "        \"\"\"", "    ", "        parsed_url = parse_url(url)", "        destination_scheme = parsed_url.scheme", "    ", "        if headers is None:", "            headers = self.headers", "    ", "        if not isinstance(retries, Retry):", "            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)", "    ", "        if release_conn is None:", "            release_conn = response_kw.get(\"preload_content\", True)", "    ", "        # Check host", "        if assert_same_host and not self.is_same_host(url):", "            raise HostChangedError(self, url, retries)", "    ", "        # Ensure that the URL we're connecting to is properly encoded", "        if url.startswith(\"/\"):", "            url = six.ensure_str(_encode_target(url))", "        else:", "            url = six.ensure_str(parsed_url.url)", "    ", "        conn = None", "    ", "        # Track whether `conn` needs to be released before", "        # returning/raising/recursing. Update this variable if necessary, and", "        # leave `release_conn` constant throughout the function. That way, if", "        # the function recurses, the original value of `release_conn` will be", "        # passed down into the recursive call, and its value will be respected.", "        #", "        # See issue #651 [1] for details.", "        #", "        # [1] <https://github.com/urllib3/urllib3/issues/651>", "        release_this_conn = release_conn", "    ", "        http_tunnel_required = connection_requires_http_tunnel(", "            self.proxy, self.proxy_config, destination_scheme", "        )", "    ", "        # Merge the proxy headers. Only done when not using HTTP CONNECT. We", "        # have to copy the headers dict so we can safely change it without those", "        # changes being reflected in anyone else's copy.", "        if not http_tunnel_required:", "            headers = headers.copy()", "            headers.update(self.proxy_headers)", "    ", "        # Must keep the exception bound to a separate variable or else Python 3", "        # complains about UnboundLocalError.", "        err = None", "    ", "        # Keep track of whether we cleanly exited the except block. This", "        # ensures we do proper cleanup in finally.", "        clean_exit = False", "    ", "        # Rewind body position, if needed. Record current position", "        # for future rewinds in the event of a redirect/retry.", "        body_pos = set_file_position(body, body_pos)", "    ", "        try:", "            # Request a connection from the queue.", "            timeout_obj = self._get_timeout(timeout)", "            conn = self._get_conn(timeout=pool_timeout)", "    ", "            conn.timeout = timeout_obj.connect_timeout", "    ", "            is_new_proxy_conn = self.proxy is not None and not getattr(", "                conn, \"sock\", None", "            )", "            if is_new_proxy_conn and http_tunnel_required:", "                self._prepare_proxy(conn)", "    ", "            # Make the request on the httplib connection object.", ">           httplib_response = self._make_request(", "                conn,", "                method,", "                url,", "                timeout=timeout_obj,", "                body=body,", "                headers=headers,", "                chunked=chunked,", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bc65e50>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["retries", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["redirect", "False"], ["assert_same_host", "False"], ["timeout", "<object object at 0x107f60b10>"], ["pool_timeout", "None"], ["release_conn", "True"], ["chunked", "False"], ["body_pos", "None"], ["response_kw", "{'request_url': 'http://localhost:4723/wd/hub/session'}"], ["parsed_url", "Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)"], ["destination_scheme", "None"], ["conn", "None"], ["release_this_conn", "True"], ["http_tunnel_required", "False"], ["err", "None"], ["clean_exit", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 703, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _make_request(", "        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw", "    ):", "        \"\"\"", "        Perform a request on a given urllib connection object taken from our", "        pool.", "    ", "        :param conn:", "            a connection from one of our connection pools", "    ", "        :param timeout:", "            Socket timeout in seconds for the request. This can be a", "            float or integer, which will set the same timeout value for", "            the socket connect and the socket read, or an instance of", "            :class:`urllib3.util.Timeout`, which gives you more fine-grained", "            control over your timeouts.", "        \"\"\"", "        self.num_requests += 1", "    ", "        timeout_obj = self._get_timeout(timeout)", "        timeout_obj.start_connect()", "        conn.timeout = timeout_obj.connect_timeout", "    ", "        # Trigger any extra validation we need to do.", "        try:", "            self._validate_conn(conn)", "        except (SocketTimeout, BaseSSLError) as e:", "            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.", "            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)", "            raise", "    ", "        # conn.request() calls http.client.*.request, not the method in", "        # urllib3.request. It also calls makefile (recv) on the socket.", "        try:", "            if chunked:", "                conn.request_chunked(method, url, **httplib_request_kw)", "            else:", ">               conn.request(method, url, **httplib_request_kw)"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bc65e50>"], ["conn", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["timeout", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"], ["chunked", "False"], ["httplib_request_kw", "{'body': '{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformV...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}}"], ["timeout_obj", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 398, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers=None):", "        if headers is None:", "            headers = {}", "        else:", "            # Avoid modifying the headers passed into .request()", "            headers = headers.copy()", "        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):", "            headers[\"User-Agent\"] = _get_default_user_agent()", ">       super(HTTPConnection, self).request(method, url, body=body, headers=headers)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 239, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers={}, *,", "                encode_chunked=False):", "        \"\"\"Send a complete request to the server.\"\"\"", ">       self._send_request(method, url, body, headers, encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1285, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_request(self, method, url, body, headers, encode_chunked):", "        # Honor explicitly requested Host: and Accept-Encoding: headers.", "        header_names = frozenset(k.lower() for k in headers)", "        skips = {}", "        if 'host' in header_names:", "            skips['skip_host'] = 1", "        if 'accept-encoding' in header_names:", "            skips['skip_accept_encoding'] = 1", "    ", "        self.putrequest(method, url, **skips)", "    ", "        # chunked encoding will happen if HTTP/1.1 is used and either", "        # the caller passes encode_chunked=True or the following", "        # conditions hold:", "        # 1. content-length has not been explicitly set", "        # 2. the body is a file or iterable, but not a str or bytes-like", "        # 3. Transfer-Encoding has NOT been explicitly set by the caller", "    ", "        if 'content-length' not in header_names:", "            # only chunk body if not explicitly set for backwards", "            # compatibility, assuming the client code is already handling the", "            # chunking", "            if 'transfer-encoding' not in header_names:", "                # if content-length cannot be automatically determined, fall", "                # back to chunked encoding", "                encode_chunked = False", "                content_length = self._get_content_length(body, method)", "                if content_length is None:", "                    if body is not None:", "                        if self.debuglevel > 0:", "                            print('Unable to determine size of %r' % body)", "                        encode_chunked = True", "                        self.putheader('Transfer-Encoding', 'chunked')", "                else:", "                    self.putheader('Content-Length', str(content_length))", "        else:", "            encode_chunked = False", "    ", "        for hdr, value in headers.items():", "            self.putheader(hdr, value)", "        if isinstance(body, str):", "            # RFC 2616 Section 3.7.1 says that text default has a", "            # default charset of iso-8859-1.", "            body = _encode(body, 'body')", ">       self.endheaders(body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1331, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def endheaders(self, message_body=None, *, encode_chunked=False):", "        \"\"\"Indicate that the last header line has been sent to the server.", "    ", "        This method sends the request to the server.  The optional message_body", "        argument can be used to pass a message body associated with the", "        request.", "        \"\"\"", "        if self.__state == _CS_REQ_STARTED:", "            self.__state = _CS_REQ_SENT", "        else:", "            raise CannotSendHeader()", ">       self._send_output(message_body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1280, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_output(self, message_body=None, encode_chunked=False):", "        \"\"\"Send the currently buffered request and clear the buffer.", "    ", "        Appends an extra \\\\r\\\\n to the buffer.", "        A message_body may be specified, to be appended to the request.", "        \"\"\"", "        self._buffer.extend((b\"\", b\"\"))", "        msg = b\"\\r\\n\".join(self._buffer)", "        del self._buffer[:]", ">       self.send(msg)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1040, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def send(self, data):", "        \"\"\"Send `data' to the server.", "        ``data`` can be a string object, a bytes object, an array object, a", "        file-like object that supports a .read() method, or an iterable object.", "        \"\"\"", "    ", "        if self.sock is None:", "            if self.auto_open:", ">               self.connect()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"], ["data", "b'POST /wd/hub/session HTTP/1.1\\r\\nHost: localhost:4723\\r\\nAccept-Encoding: identity\\r\\nContent-Length: 1219\\r\\nAccept...enium/4.1.3 (python mac))\\r\\nConnection: keep-alive\\r\\nX-Idempotency-Key: 39c54bcd-23a6-4df0-bb02-060adaff3b19\\r\\n\\r\\n'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 980, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def connect(self):", ">       conn = self._new_conn()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 205, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", "            conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )", "    ", "        except SocketTimeout:", "            raise ConnectTimeoutError(", "                self,", "                \"Connection to %s timed out. (connect timeout=%s)\"", "                % (self.host, self.timeout),", "            )", "    ", "        except SocketError as e:", ">           raise NewConnectionError(", "                self, \"Failed to establish a new connection: %s\" % e", "            )", "E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12be0b400>: Failed to establish a new connection: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12be0b400>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "NewConnectionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12be0b400>: Failed to establish a new connection: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882fd0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12be0b400>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12be0b400>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bc65e50>"], ["_stacktrace", "<traceback object at 0x12be23740>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12be0b400>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, null]]}, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc65b80>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc65a00>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc658e0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.004665037000000094, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_mirror_offset", "location": ["tests/YCP/photo_edit_page_test.py", 78, "Test.test_edit_mirror_offset"], "keywords": {"test_edit_mirror_offset": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc65b80>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc65a00>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bc658e0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.00023353199999931462, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_mirror_pattern", "location": ["tests/YCP/photo_edit_page_test.py", 70, "Test.test_edit_mirror_pattern"], "keywords": {"test_edit_mirror_pattern": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bdec490>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882e80>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bdec490>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bdec490>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd5ad60>"], ["_stacktrace", "<traceback object at 0x12bc748c0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", ">           conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 174, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", "                sock.connect(sa)", "                return sock", "    ", "            except socket.error as e:", "                err = e", "                if sock is not None:", "                    sock.close()", "                    sock = None", "    ", "        if err is not None:", ">           raise err"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 95, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", ">               sock.connect(sa)", "E               ConnectionRefusedError: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def urlopen(", "        self,", "        method,", "        url,", "        body=None,", "        headers=None,", "        retries=None,", "        redirect=True,", "        assert_same_host=True,", "        timeout=_Default,", "        pool_timeout=None,", "        release_conn=None,", "        chunked=False,", "        body_pos=None,", "        **response_kw", "    ):", "        \"\"\"", "        Get a connection from the pool and perform an HTTP request. This is the", "        lowest level call for making a request, so you'll need to specify all", "        the raw details.", "    ", "        .. note::", "    ", "           More commonly, it's appropriate to use a convenience method provided", "           by :class:`.RequestMethods`, such as :meth:`request`.", "    ", "        .. note::", "    ", "           `release_conn` will only behave as expected if", "           `preload_content=False` because we want to make", "           `preload_content=False` the default behaviour someday soon without", "           breaking backwards compatibility.", "    ", "        :param method:", "            HTTP request method (such as GET, POST, PUT, etc.)", "    ", "        :param url:", "            The URL to perform the request on.", "    ", "        :param body:", "            Data to send in the request body, either :class:`str`, :class:`bytes`,", "            an iterable of :class:`str`/:class:`bytes`, or a file-like object.", "    ", "        :param headers:", "            Dictionary of custom headers to send, such as User-Agent,", "            If-None-Match, etc. If None, pool headers are used. If provided,", "            these headers completely replace any pool-specific headers.", "    ", "        :param retries:", "            Configure the number of retries to allow before raising a", "            :class:`~urllib3.exceptions.MaxRetryError` exception.", "    ", "            Pass ``None`` to retry until you receive a response. Pass a", "            :class:`~urllib3.util.retry.Retry` object for fine-grained control", "            over different types of retries.", "            Pass an integer number to retry connection errors that many times,", "            but no other types of errors. Pass zero to never retry.", "    ", "            If ``False``, then retries are disabled and any exception is raised", "            immediately. Also, instead of raising a MaxRetryError on redirects,", "            the redirect response will be returned.", "    ", "        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.", "    ", "        :param redirect:", "            If True, automatically handle redirects (status codes 301, 302,", "            303, 307, 308). Each redirect counts as a retry. Disabling retries", "            will disable redirect, too.", "    ", "        :param assert_same_host:", "            If ``True``, will make sure that the host of the pool requests is", "            consistent else will raise HostChangedError. When ``False``, you can", "            use the pool on an HTTP proxy and request foreign hosts.", "    ", "        :param timeout:", "            If specified, overrides the default timeout for this one", "            request. It may be a float (in seconds) or an instance of", "            :class:`urllib3.util.Timeout`.", "    ", "        :param pool_timeout:", "            If set and the pool is set to block=True, then this method will", "            block for ``pool_timeout`` seconds and raise EmptyPoolError if no", "            connection is available within the time period.", "    ", "        :param release_conn:", "            If False, then the urlopen call will not release the connection", "            back into the pool once a response is received (but will release if", "            you read the entire contents of the response such as when", "            `preload_content=True`). This is useful if you're not preloading", "            the response's content immediately. You will need to call", "            ``r.release_conn()`` on the response ``r`` to return the connection", "            back into the pool. If None, it takes the value of", "            ``response_kw.get('preload_content', True)``.", "    ", "        :param chunked:", "            If True, urllib3 will send the body using chunked transfer", "            encoding. Otherwise, urllib3 will send the body using the standard", "            content-length form. Defaults to False.", "    ", "        :param int body_pos:", "            Position to seek to in file-like body in the event of a retry or", "            redirect. Typically this won't need to be set because urllib3 will", "            auto-populate the value when needed.", "    ", "        :param \\\\**response_kw:", "            Additional parameters are passed to", "            :meth:`urllib3.response.HTTPResponse.from_httplib`", "        \"\"\"", "    ", "        parsed_url = parse_url(url)", "        destination_scheme = parsed_url.scheme", "    ", "        if headers is None:", "            headers = self.headers", "    ", "        if not isinstance(retries, Retry):", "            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)", "    ", "        if release_conn is None:", "            release_conn = response_kw.get(\"preload_content\", True)", "    ", "        # Check host", "        if assert_same_host and not self.is_same_host(url):", "            raise HostChangedError(self, url, retries)", "    ", "        # Ensure that the URL we're connecting to is properly encoded", "        if url.startswith(\"/\"):", "            url = six.ensure_str(_encode_target(url))", "        else:", "            url = six.ensure_str(parsed_url.url)", "    ", "        conn = None", "    ", "        # Track whether `conn` needs to be released before", "        # returning/raising/recursing. Update this variable if necessary, and", "        # leave `release_conn` constant throughout the function. That way, if", "        # the function recurses, the original value of `release_conn` will be", "        # passed down into the recursive call, and its value will be respected.", "        #", "        # See issue #651 [1] for details.", "        #", "        # [1] <https://github.com/urllib3/urllib3/issues/651>", "        release_this_conn = release_conn", "    ", "        http_tunnel_required = connection_requires_http_tunnel(", "            self.proxy, self.proxy_config, destination_scheme", "        )", "    ", "        # Merge the proxy headers. Only done when not using HTTP CONNECT. We", "        # have to copy the headers dict so we can safely change it without those", "        # changes being reflected in anyone else's copy.", "        if not http_tunnel_required:", "            headers = headers.copy()", "            headers.update(self.proxy_headers)", "    ", "        # Must keep the exception bound to a separate variable or else Python 3", "        # complains about UnboundLocalError.", "        err = None", "    ", "        # Keep track of whether we cleanly exited the except block. This", "        # ensures we do proper cleanup in finally.", "        clean_exit = False", "    ", "        # Rewind body position, if needed. Record current position", "        # for future rewinds in the event of a redirect/retry.", "        body_pos = set_file_position(body, body_pos)", "    ", "        try:", "            # Request a connection from the queue.", "            timeout_obj = self._get_timeout(timeout)", "            conn = self._get_conn(timeout=pool_timeout)", "    ", "            conn.timeout = timeout_obj.connect_timeout", "    ", "            is_new_proxy_conn = self.proxy is not None and not getattr(", "                conn, \"sock\", None", "            )", "            if is_new_proxy_conn and http_tunnel_required:", "                self._prepare_proxy(conn)", "    ", "            # Make the request on the httplib connection object.", ">           httplib_response = self._make_request(", "                conn,", "                method,", "                url,", "                timeout=timeout_obj,", "                body=body,", "                headers=headers,", "                chunked=chunked,", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd5ad60>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["retries", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["redirect", "False"], ["assert_same_host", "False"], ["timeout", "<object object at 0x107f60b10>"], ["pool_timeout", "None"], ["release_conn", "True"], ["chunked", "False"], ["body_pos", "None"], ["response_kw", "{'request_url': 'http://localhost:4723/wd/hub/session'}"], ["parsed_url", "Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)"], ["destination_scheme", "None"], ["conn", "None"], ["release_this_conn", "True"], ["http_tunnel_required", "False"], ["err", "None"], ["clean_exit", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 703, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _make_request(", "        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw", "    ):", "        \"\"\"", "        Perform a request on a given urllib connection object taken from our", "        pool.", "    ", "        :param conn:", "            a connection from one of our connection pools", "    ", "        :param timeout:", "            Socket timeout in seconds for the request. This can be a", "            float or integer, which will set the same timeout value for", "            the socket connect and the socket read, or an instance of", "            :class:`urllib3.util.Timeout`, which gives you more fine-grained", "            control over your timeouts.", "        \"\"\"", "        self.num_requests += 1", "    ", "        timeout_obj = self._get_timeout(timeout)", "        timeout_obj.start_connect()", "        conn.timeout = timeout_obj.connect_timeout", "    ", "        # Trigger any extra validation we need to do.", "        try:", "            self._validate_conn(conn)", "        except (SocketTimeout, BaseSSLError) as e:", "            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.", "            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)", "            raise", "    ", "        # conn.request() calls http.client.*.request, not the method in", "        # urllib3.request. It also calls makefile (recv) on the socket.", "        try:", "            if chunked:", "                conn.request_chunked(method, url, **httplib_request_kw)", "            else:", ">               conn.request(method, url, **httplib_request_kw)"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd5ad60>"], ["conn", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["timeout", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"], ["chunked", "False"], ["httplib_request_kw", "{'body': '{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformV...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}}"], ["timeout_obj", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 398, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers=None):", "        if headers is None:", "            headers = {}", "        else:", "            # Avoid modifying the headers passed into .request()", "            headers = headers.copy()", "        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):", "            headers[\"User-Agent\"] = _get_default_user_agent()", ">       super(HTTPConnection, self).request(method, url, body=body, headers=headers)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 239, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers={}, *,", "                encode_chunked=False):", "        \"\"\"Send a complete request to the server.\"\"\"", ">       self._send_request(method, url, body, headers, encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1285, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_request(self, method, url, body, headers, encode_chunked):", "        # Honor explicitly requested Host: and Accept-Encoding: headers.", "        header_names = frozenset(k.lower() for k in headers)", "        skips = {}", "        if 'host' in header_names:", "            skips['skip_host'] = 1", "        if 'accept-encoding' in header_names:", "            skips['skip_accept_encoding'] = 1", "    ", "        self.putrequest(method, url, **skips)", "    ", "        # chunked encoding will happen if HTTP/1.1 is used and either", "        # the caller passes encode_chunked=True or the following", "        # conditions hold:", "        # 1. content-length has not been explicitly set", "        # 2. the body is a file or iterable, but not a str or bytes-like", "        # 3. Transfer-Encoding has NOT been explicitly set by the caller", "    ", "        if 'content-length' not in header_names:", "            # only chunk body if not explicitly set for backwards", "            # compatibility, assuming the client code is already handling the", "            # chunking", "            if 'transfer-encoding' not in header_names:", "                # if content-length cannot be automatically determined, fall", "                # back to chunked encoding", "                encode_chunked = False", "                content_length = self._get_content_length(body, method)", "                if content_length is None:", "                    if body is not None:", "                        if self.debuglevel > 0:", "                            print('Unable to determine size of %r' % body)", "                        encode_chunked = True", "                        self.putheader('Transfer-Encoding', 'chunked')", "                else:", "                    self.putheader('Content-Length', str(content_length))", "        else:", "            encode_chunked = False", "    ", "        for hdr, value in headers.items():", "            self.putheader(hdr, value)", "        if isinstance(body, str):", "            # RFC 2616 Section 3.7.1 says that text default has a", "            # default charset of iso-8859-1.", "            body = _encode(body, 'body')", ">       self.endheaders(body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1331, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def endheaders(self, message_body=None, *, encode_chunked=False):", "        \"\"\"Indicate that the last header line has been sent to the server.", "    ", "        This method sends the request to the server.  The optional message_body", "        argument can be used to pass a message body associated with the", "        request.", "        \"\"\"", "        if self.__state == _CS_REQ_STARTED:", "            self.__state = _CS_REQ_SENT", "        else:", "            raise CannotSendHeader()", ">       self._send_output(message_body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1280, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_output(self, message_body=None, encode_chunked=False):", "        \"\"\"Send the currently buffered request and clear the buffer.", "    ", "        Appends an extra \\\\r\\\\n to the buffer.", "        A message_body may be specified, to be appended to the request.", "        \"\"\"", "        self._buffer.extend((b\"\", b\"\"))", "        msg = b\"\\r\\n\".join(self._buffer)", "        del self._buffer[:]", ">       self.send(msg)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1040, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def send(self, data):", "        \"\"\"Send `data' to the server.", "        ``data`` can be a string object, a bytes object, an array object, a", "        file-like object that supports a .read() method, or an iterable object.", "        \"\"\"", "    ", "        if self.sock is None:", "            if self.auto_open:", ">               self.connect()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"], ["data", "b'POST /wd/hub/session HTTP/1.1\\r\\nHost: localhost:4723\\r\\nAccept-Encoding: identity\\r\\nContent-Length: 1219\\r\\nAccept...enium/4.1.3 (python mac))\\r\\nConnection: keep-alive\\r\\nX-Idempotency-Key: 9c0183df-9d6f-420d-8c31-d3fcbd65886b\\r\\n\\r\\n'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 980, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def connect(self):", ">       conn = self._new_conn()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 205, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", "            conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )", "    ", "        except SocketTimeout:", "            raise ConnectTimeoutError(", "                self,", "                \"Connection to %s timed out. (connect timeout=%s)\"", "                % (self.host, self.timeout),", "            )", "    ", "        except SocketError as e:", ">           raise NewConnectionError(", "                self, \"Failed to establish a new connection: %s\" % e", "            )", "E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12bdec490>: Failed to establish a new connection: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bdec490>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "NewConnectionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12bdec490>: Failed to establish a new connection: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882e80>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bdec490>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bdec490>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd5ad60>"], ["_stacktrace", "<traceback object at 0x12bc748c0>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bdec490>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, null]]}, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd5aac0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd5a940>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd5a7c0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.005432984999999668, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_edit_mirror_pattern", "location": ["tests/YCP/photo_edit_page_test.py", 70, "Test.test_edit_mirror_pattern"], "keywords": {"test_edit_mirror_pattern": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd5aac0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd5a940>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd5a7c0>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.00024324700000022403, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_perspective_apply", "location": ["tests/YCP/photo_edit_page_test.py", 64, "Test.test_perspective_apply"], "keywords": {"test_perspective_apply": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53760>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882d30>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53760>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53760>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd53e50>"], ["_stacktrace", "<traceback object at 0x12bd82d40>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", ">           conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 174, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", "                sock.connect(sa)", "                return sock", "    ", "            except socket.error as e:", "                err = e", "                if sock is not None:", "                    sock.close()", "                    sock = None", "    ", "        if err is not None:", ">           raise err"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 95, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def create_connection(", "        address,", "        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,", "        source_address=None,", "        socket_options=None,", "    ):", "        \"\"\"Connect to *address* and return the socket object.", "    ", "        Convenience function.  Connect to *address* (a 2-tuple ``(host,", "        port)``) and return the socket object.  Passing the optional", "        *timeout* parameter will set the timeout on the socket instance", "        before attempting to connect.  If no *timeout* is supplied, the", "        global default timeout setting returned by :func:`socket.getdefaulttimeout`", "        is used.  If *source_address* is set it must be a tuple of (host, port)", "        for the socket to bind as a source address before making the connection.", "        An host of '' or port 0 tells the OS to use the default.", "        \"\"\"", "    ", "        host, port = address", "        if host.startswith(\"[\"):", "            host = host.strip(\"[]\")", "        err = None", "    ", "        # Using the value from allowed_gai_family() in the context of getaddrinfo lets", "        # us select whether to work with IPv4 DNS records, IPv6 records, or both.", "        # The original create_connection function always returns all records.", "        family = allowed_gai_family()", "    ", "        try:", "            host.encode(\"idna\")", "        except UnicodeError:", "            return six.raise_from(", "                LocationParseError(u\"'%s', label empty or too long\" % host), None", "            )", "    ", "        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):", "            af, socktype, proto, canonname, sa = res", "            sock = None", "            try:", "                sock = socket.socket(af, socktype, proto)", "    ", "                # If provided, set socket level options before connecting.", "                _set_socket_options(sock, socket_options)", "    ", "                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:", "                    sock.settimeout(timeout)", "                if source_address:", "                    sock.bind(source_address)", ">               sock.connect(sa)", "E               ConnectionRefusedError: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["address", "('localhost', 4723)"], ["timeout", "<object object at 0x107f60380>"], ["source_address", "None"], ["socket_options", "[(6, 1, 1)]"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/connection.py", "lineno": 85, "message": "ConnectionRefusedError: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def urlopen(", "        self,", "        method,", "        url,", "        body=None,", "        headers=None,", "        retries=None,", "        redirect=True,", "        assert_same_host=True,", "        timeout=_Default,", "        pool_timeout=None,", "        release_conn=None,", "        chunked=False,", "        body_pos=None,", "        **response_kw", "    ):", "        \"\"\"", "        Get a connection from the pool and perform an HTTP request. This is the", "        lowest level call for making a request, so you'll need to specify all", "        the raw details.", "    ", "        .. note::", "    ", "           More commonly, it's appropriate to use a convenience method provided", "           by :class:`.RequestMethods`, such as :meth:`request`.", "    ", "        .. note::", "    ", "           `release_conn` will only behave as expected if", "           `preload_content=False` because we want to make", "           `preload_content=False` the default behaviour someday soon without", "           breaking backwards compatibility.", "    ", "        :param method:", "            HTTP request method (such as GET, POST, PUT, etc.)", "    ", "        :param url:", "            The URL to perform the request on.", "    ", "        :param body:", "            Data to send in the request body, either :class:`str`, :class:`bytes`,", "            an iterable of :class:`str`/:class:`bytes`, or a file-like object.", "    ", "        :param headers:", "            Dictionary of custom headers to send, such as User-Agent,", "            If-None-Match, etc. If None, pool headers are used. If provided,", "            these headers completely replace any pool-specific headers.", "    ", "        :param retries:", "            Configure the number of retries to allow before raising a", "            :class:`~urllib3.exceptions.MaxRetryError` exception.", "    ", "            Pass ``None`` to retry until you receive a response. Pass a", "            :class:`~urllib3.util.retry.Retry` object for fine-grained control", "            over different types of retries.", "            Pass an integer number to retry connection errors that many times,", "            but no other types of errors. Pass zero to never retry.", "    ", "            If ``False``, then retries are disabled and any exception is raised", "            immediately. Also, instead of raising a MaxRetryError on redirects,", "            the redirect response will be returned.", "    ", "        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.", "    ", "        :param redirect:", "            If True, automatically handle redirects (status codes 301, 302,", "            303, 307, 308). Each redirect counts as a retry. Disabling retries", "            will disable redirect, too.", "    ", "        :param assert_same_host:", "            If ``True``, will make sure that the host of the pool requests is", "            consistent else will raise HostChangedError. When ``False``, you can", "            use the pool on an HTTP proxy and request foreign hosts.", "    ", "        :param timeout:", "            If specified, overrides the default timeout for this one", "            request. It may be a float (in seconds) or an instance of", "            :class:`urllib3.util.Timeout`.", "    ", "        :param pool_timeout:", "            If set and the pool is set to block=True, then this method will", "            block for ``pool_timeout`` seconds and raise EmptyPoolError if no", "            connection is available within the time period.", "    ", "        :param release_conn:", "            If False, then the urlopen call will not release the connection", "            back into the pool once a response is received (but will release if", "            you read the entire contents of the response such as when", "            `preload_content=True`). This is useful if you're not preloading", "            the response's content immediately. You will need to call", "            ``r.release_conn()`` on the response ``r`` to return the connection", "            back into the pool. If None, it takes the value of", "            ``response_kw.get('preload_content', True)``.", "    ", "        :param chunked:", "            If True, urllib3 will send the body using chunked transfer", "            encoding. Otherwise, urllib3 will send the body using the standard", "            content-length form. Defaults to False.", "    ", "        :param int body_pos:", "            Position to seek to in file-like body in the event of a retry or", "            redirect. Typically this won't need to be set because urllib3 will", "            auto-populate the value when needed.", "    ", "        :param \\\\**response_kw:", "            Additional parameters are passed to", "            :meth:`urllib3.response.HTTPResponse.from_httplib`", "        \"\"\"", "    ", "        parsed_url = parse_url(url)", "        destination_scheme = parsed_url.scheme", "    ", "        if headers is None:", "            headers = self.headers", "    ", "        if not isinstance(retries, Retry):", "            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)", "    ", "        if release_conn is None:", "            release_conn = response_kw.get(\"preload_content\", True)", "    ", "        # Check host", "        if assert_same_host and not self.is_same_host(url):", "            raise HostChangedError(self, url, retries)", "    ", "        # Ensure that the URL we're connecting to is properly encoded", "        if url.startswith(\"/\"):", "            url = six.ensure_str(_encode_target(url))", "        else:", "            url = six.ensure_str(parsed_url.url)", "    ", "        conn = None", "    ", "        # Track whether `conn` needs to be released before", "        # returning/raising/recursing. Update this variable if necessary, and", "        # leave `release_conn` constant throughout the function. That way, if", "        # the function recurses, the original value of `release_conn` will be", "        # passed down into the recursive call, and its value will be respected.", "        #", "        # See issue #651 [1] for details.", "        #", "        # [1] <https://github.com/urllib3/urllib3/issues/651>", "        release_this_conn = release_conn", "    ", "        http_tunnel_required = connection_requires_http_tunnel(", "            self.proxy, self.proxy_config, destination_scheme", "        )", "    ", "        # Merge the proxy headers. Only done when not using HTTP CONNECT. We", "        # have to copy the headers dict so we can safely change it without those", "        # changes being reflected in anyone else's copy.", "        if not http_tunnel_required:", "            headers = headers.copy()", "            headers.update(self.proxy_headers)", "    ", "        # Must keep the exception bound to a separate variable or else Python 3", "        # complains about UnboundLocalError.", "        err = None", "    ", "        # Keep track of whether we cleanly exited the except block. This", "        # ensures we do proper cleanup in finally.", "        clean_exit = False", "    ", "        # Rewind body position, if needed. Record current position", "        # for future rewinds in the event of a redirect/retry.", "        body_pos = set_file_position(body, body_pos)", "    ", "        try:", "            # Request a connection from the queue.", "            timeout_obj = self._get_timeout(timeout)", "            conn = self._get_conn(timeout=pool_timeout)", "    ", "            conn.timeout = timeout_obj.connect_timeout", "    ", "            is_new_proxy_conn = self.proxy is not None and not getattr(", "                conn, \"sock\", None", "            )", "            if is_new_proxy_conn and http_tunnel_required:", "                self._prepare_proxy(conn)", "    ", "            # Make the request on the httplib connection object.", ">           httplib_response = self._make_request(", "                conn,", "                method,", "                url,", "                timeout=timeout_obj,", "                body=body,", "                headers=headers,", "                chunked=chunked,", "            )"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd53e50>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["retries", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["redirect", "False"], ["assert_same_host", "False"], ["timeout", "<object object at 0x107f60b10>"], ["pool_timeout", "None"], ["release_conn", "True"], ["chunked", "False"], ["body_pos", "None"], ["response_kw", "{'request_url': 'http://localhost:4723/wd/hub/session'}"], ["parsed_url", "Url(scheme=None, auth=None, host=None, port=None, path='/wd/hub/session', query=None, fragment=None)"], ["destination_scheme", "None"], ["conn", "None"], ["release_this_conn", "True"], ["http_tunnel_required", "False"], ["err", "None"], ["clean_exit", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 703, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _make_request(", "        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw", "    ):", "        \"\"\"", "        Perform a request on a given urllib connection object taken from our", "        pool.", "    ", "        :param conn:", "            a connection from one of our connection pools", "    ", "        :param timeout:", "            Socket timeout in seconds for the request. This can be a", "            float or integer, which will set the same timeout value for", "            the socket connect and the socket read, or an instance of", "            :class:`urllib3.util.Timeout`, which gives you more fine-grained", "            control over your timeouts.", "        \"\"\"", "        self.num_requests += 1", "    ", "        timeout_obj = self._get_timeout(timeout)", "        timeout_obj.start_connect()", "        conn.timeout = timeout_obj.connect_timeout", "    ", "        # Trigger any extra validation we need to do.", "        try:", "            self._validate_conn(conn)", "        except (SocketTimeout, BaseSSLError) as e:", "            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.", "            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)", "            raise", "    ", "        # conn.request() calls http.client.*.request, not the method in", "        # urllib3.request. It also calls makefile (recv) on the socket.", "        try:", "            if chunked:", "                conn.request_chunked(method, url, **httplib_request_kw)", "            else:", ">               conn.request(method, url, **httplib_request_kw)"], "reprfuncargs": {"args": [["self", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd53e50>"], ["conn", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["timeout", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"], ["chunked", "False"], ["httplib_request_kw", "{'body': '{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformV...ntent-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}}"], ["timeout_obj", "Timeout(connect=<object object at 0x107f60380>, read=<object object at 0x107f60380>, total=None)"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 398, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers=None):", "        if headers is None:", "            headers = {}", "        else:", "            # Avoid modifying the headers passed into .request()", "            headers = headers.copy()", "        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):", "            headers[\"User-Agent\"] = _get_default_user_agent()", ">       super(HTTPConnection, self).request(method, url, body=body, headers=headers)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 239, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def request(self, method, url, body=None, headers={}, *,", "                encode_chunked=False):", "        \"\"\"Send a complete request to the server.\"\"\"", ">       self._send_request(method, url, body, headers, encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\": ..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1285, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_request(self, method, url, body, headers, encode_chunked):", "        # Honor explicitly requested Host: and Accept-Encoding: headers.", "        header_names = frozenset(k.lower() for k in headers)", "        skips = {}", "        if 'host' in header_names:", "            skips['skip_host'] = 1", "        if 'accept-encoding' in header_names:", "            skips['skip_accept_encoding'] = 1", "    ", "        self.putrequest(method, url, **skips)", "    ", "        # chunked encoding will happen if HTTP/1.1 is used and either", "        # the caller passes encode_chunked=True or the following", "        # conditions hold:", "        # 1. content-length has not been explicitly set", "        # 2. the body is a file or iterable, but not a str or bytes-like", "        # 3. Transfer-Encoding has NOT been explicitly set by the caller", "    ", "        if 'content-length' not in header_names:", "            # only chunk body if not explicitly set for backwards", "            # compatibility, assuming the client code is already handling the", "            # chunking", "            if 'transfer-encoding' not in header_names:", "                # if content-length cannot be automatically determined, fall", "                # back to chunked encoding", "                encode_chunked = False", "                content_length = self._get_content_length(body, method)", "                if content_length is None:", "                    if body is not None:", "                        if self.debuglevel > 0:", "                            print('Unable to determine size of %r' % body)", "                        encode_chunked = True", "                        self.putheader('Transfer-Encoding', 'chunked')", "                else:", "                    self.putheader('Content-Length', str(content_length))", "        else:", "            encode_chunked = False", "    ", "        for hdr, value in headers.items():", "            self.putheader(hdr, value)", "        if isinstance(body, str):", "            # RFC 2616 Section 3.7.1 says that text default has a", "            # default charset of iso-8859-1.", "            body = _encode(body, 'body')", ">       self.endheaders(body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["headers", "{'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'appium/python 2.2.0 (selenium/4.1.3 (python mac))', ...}"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1331, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def endheaders(self, message_body=None, *, encode_chunked=False):", "        \"\"\"Indicate that the last header line has been sent to the server.", "    ", "        This method sends the request to the server.  The optional message_body", "        argument can be used to pass a message body associated with the", "        request.", "        \"\"\"", "        if self.__state == _CS_REQ_STARTED:", "            self.__state = _CS_REQ_SENT", "        else:", "            raise CannotSendHeader()", ">       self._send_output(message_body, encode_chunked=encode_chunked)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1280, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _send_output(self, message_body=None, encode_chunked=False):", "        \"\"\"Send the currently buffered request and clear the buffer.", "    ", "        Appends an extra \\\\r\\\\n to the buffer.", "        A message_body may be specified, to be appended to the request.", "        \"\"\"", "        self._buffer.extend((b\"\", b\"\"))", "        msg = b\"\\r\\n\".join(self._buffer)", "        del self._buffer[:]", ">       self.send(msg)"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"], ["message_body", "b'{\"capabilities\": {\"alwaysMatch\": {\"appium:udid\": \"R5CR5122ACA\", \"platformName\": \"Android\", \"appium:platformVersion\":..../PFQA_APP_UI/chromedriver\", \"chromedriverChromeMappingFile\": \"./PFQA_APP_UI/chromedriver/chromedriver_support.json\"}}'"], ["encode_chunked", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 1040, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def send(self, data):", "        \"\"\"Send `data' to the server.", "        ``data`` can be a string object, a bytes object, an array object, a", "        file-like object that supports a .read() method, or an iterable object.", "        \"\"\"", "    ", "        if self.sock is None:", "            if self.auto_open:", ">               self.connect()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"], ["data", "b'POST /wd/hub/session HTTP/1.1\\r\\nHost: localhost:4723\\r\\nAccept-Encoding: identity\\r\\nContent-Length: 1219\\r\\nAccept...enium/4.1.3 (python mac))\\r\\nConnection: keep-alive\\r\\nX-Idempotency-Key: 0e9f5b47-a638-4aff-bca8-35fa067965bd\\r\\n\\r\\n'"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/http/client.py", "lineno": 980, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def connect(self):", ">       conn = self._new_conn()"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 205, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def _new_conn(self):", "        \"\"\"Establish a socket connection and set nodelay settings on it.", "    ", "        :return: New socket connection.", "        \"\"\"", "        extra_kw = {}", "        if self.source_address:", "            extra_kw[\"source_address\"] = self.source_address", "    ", "        if self.socket_options:", "            extra_kw[\"socket_options\"] = self.socket_options", "    ", "        try:", "            conn = connection.create_connection(", "                (self._dns_host, self.port), self.timeout, **extra_kw", "            )", "    ", "        except SocketTimeout:", "            raise ConnectTimeoutError(", "                self,", "                \"Connection to %s timed out. (connect timeout=%s)\"", "                % (self.host, self.timeout),", "            )", "    ", "        except SocketError as e:", ">           raise NewConnectionError(", "                self, \"Failed to establish a new connection: %s\" % e", "            )", "E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12bd53760>: Failed to establish a new connection: [Errno 61] Connection refused"], "reprfuncargs": {"args": [["self", "<urllib3.connection.HTTPConnection object at 0x12bd53760>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "NewConnectionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connection.py", "lineno": 186, "message": "urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x12bd53760>: Failed to establish a new connection: [Errno 61] Connection refused"}, "During handling of the above exception, another exception occurred:"], [{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_edit_page_test.Test object at 0x125882d30>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_edit_page_test.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    driver = webdriver.Remote(\"http://localhost:4723/wd/hub\", self.caps)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 89, "message": "in create"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    super().__init__("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 274, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    self.start_session(capabilities, browser_profile)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 269, "message": "in __init__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.execute(RemoteCommand.NEW_SESSION, parameters)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/appium/webdriver/webdriver.py", "lineno": 369, "message": "in start_session"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = self.command_executor.execute(driver_command, params)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py", "lineno": 423, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._request(command_info[0], url, body=data)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 333, "message": "in execute"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    resp = self._conn.request(method, url, body=body, headers=headers)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/selenium/webdriver/remote/remote_connection.py", "lineno": 355, "message": "in _request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.request_encode_body("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 78, "message": "in request"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen(method, url, **extra_kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/request.py", "lineno": 170, "message": "in request_encode_body"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    response = conn.urlopen(method, u.request_uri, **kw)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/poolmanager.py", "lineno": 376, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self.urlopen("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 815, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    retries = retries.increment("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/connectionpool.py", "lineno": 787, "message": "in urlopen"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def increment(", "        self,", "        method=None,", "        url=None,", "        response=None,", "        error=None,", "        _pool=None,", "        _stacktrace=None,", "    ):", "        \"\"\"Return a new Retry object with incremented retry counters.", "    ", "        :param response: A response object, or None, if the server did not", "            return a response.", "        :type response: :class:`~urllib3.response.HTTPResponse`", "        :param Exception error: An error encountered during the request, or", "            None if the response was received successfully.", "    ", "        :return: A new ``Retry`` object.", "        \"\"\"", "        if self.total is False and error:", "            # Disabled, indicate to re-raise the error.", "            raise six.reraise(type(error), error, _stacktrace)", "    ", "        total = self.total", "        if total is not None:", "            total -= 1", "    ", "        connect = self.connect", "        read = self.read", "        redirect = self.redirect", "        status_count = self.status", "        other = self.other", "        cause = \"unknown\"", "        status = None", "        redirect_location = None", "    ", "        if error and self._is_connection_error(error):", "            # Connect retry?", "            if connect is False:", "                raise six.reraise(type(error), error, _stacktrace)", "            elif connect is not None:", "                connect -= 1", "    ", "        elif error and self._is_read_error(error):", "            # Read retry?", "            if read is False or not self._is_method_retryable(method):", "                raise six.reraise(type(error), error, _stacktrace)", "            elif read is not None:", "                read -= 1", "    ", "        elif error:", "            # Other retry?", "            if other is not None:", "                other -= 1", "    ", "        elif response and response.get_redirect_location():", "            # Redirect retry?", "            if redirect is not None:", "                redirect -= 1", "            cause = \"too many redirects\"", "            redirect_location = response.get_redirect_location()", "            status = response.status", "    ", "        else:", "            # Incrementing because of a server error like a 500 in", "            # status_forcelist and the given method is in the allowed_methods", "            cause = ResponseError.GENERIC_ERROR", "            if response and response.status:", "                if status_count is not None:", "                    status_count -= 1", "                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)", "                status = response.status", "    ", "        history = self.history + (", "            RequestHistory(method, url, error, status, redirect_location),", "        )", "    ", "        new_retry = self.new(", "            total=total,", "            connect=connect,", "            read=read,", "            redirect=redirect,", "            status=status_count,", "            other=other,", "            history=history,", "        )", "    ", "        if new_retry.is_exhausted():", ">           raise MaxRetryError(_pool, url, error or ResponseError(cause))", "E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53760>: Failed to establish a new connection: [Errno 61] Connection refused'))"], "reprfuncargs": {"args": [["self", "Retry(total=0, connect=None, read=None, redirect=None, status=None)"], ["method", "'POST'"], ["url", "'/wd/hub/session'"], ["response", "None"], ["error", "NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53760>: Failed to establish a new connection: [Errno 61] Connection refused')"], ["_pool", "<urllib3.connectionpool.HTTPConnectionPool object at 0x12bd53e50>"], ["_stacktrace", "<traceback object at 0x12bd82d40>"]]}, "reprlocals": null, "reprfileloc": {"path": "../.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "MaxRetryError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/.pyenv/versions/3.9.9/lib/python3.9/site-packages/urllib3/util/retry.py", "lineno": 592, "message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=4723): Max retries exceeded with url: /wd/hub/session (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53760>: Failed to establish a new connection: [Errno 61] Connection refused'))"}, null]]}, "when": "setup", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53b80>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53a00>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53880>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.00577492000000035, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_edit_page_test.py::Test::test_perspective_apply", "location": ["tests/YCP/photo_edit_page_test.py", 64, "Test.test_perspective_apply"], "keywords": {"test_perspective_apply": 1, "YCP": 1, "pytestmark": 1, "Test": 1, "photo_edit_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured log setup", "\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53b80>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53a00>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session\n\u001b[33mWARNING \u001b[0m urllib3.connectionpool:connectionpool.py:812 Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<urllib3.connection.HTTPConnection object at 0x12bd53880>: Failed to establish a new connection: [Errno 61] Connection refused')': /wd/hub/session"]], "duration": 0.0002427599999998975, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_picker_page_test.py::Test::test_feature_i_removal", "location": ["tests/YCP/photo_picker_page_test.py", 34, "Test.test_feature_i_removal"], "keywords": {"test_feature_i_removal": 1, "picker": 1, "pytestmark": 1, "Test": 1, "photo_picker_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_picker_page_test.Test object at 0x12588b9a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_picker_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125b0d1f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_picker_page_test.Test object at 0x12588b9a0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_picker_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125b0d1f0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0199371450000001, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_picker_page_test.py::Test::test_feature_i_removal", "location": ["tests/YCP/photo_picker_page_test.py", 34, "Test.test_feature_i_removal"], "keywords": {"test_feature_i_removal": 1, "picker": 1, "pytestmark": 1, "Test": 1, "photo_picker_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0004430150000001021, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_picker_page_test.py::Test::test_photo_picker_back", "location": ["tests/YCP/photo_picker_page_test.py", 17, "Test.test_photo_picker_back"], "keywords": {"test_photo_picker_back": 1, "picker": 1, "pytestmark": 1, "Test": 1, "photo_picker_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_picker_page_test.Test object at 0x12588b700>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_picker_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x12bdec9d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_picker_page_test.Test object at 0x12588b700>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_picker_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x12bdec9d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0240903819999998, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_picker_page_test.py::Test::test_photo_picker_back", "location": ["tests/YCP/photo_picker_page_test.py", 17, "Test.test_photo_picker_back"], "keywords": {"test_photo_picker_back": 1, "picker": 1, "pytestmark": 1, "Test": 1, "photo_picker_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00035790399999946487, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_picker_page_test.py::Test::test_photo_picker_single_view", "location": ["tests/YCP/photo_picker_page_test.py", 26, "Test.test_photo_picker_single_view"], "keywords": {"test_photo_picker_single_view": 1, "picker": 1, "pytestmark": 1, "Test": 1, "photo_picker_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_picker_page_test.Test object at 0x12588b850>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_picker_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125b0d280>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<YCP.photo_picker_page_test.Test object at 0x12588b850>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/photo_picker_page_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125b0d280>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02089665300000032, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/photo_picker_page_test.py::Test::test_photo_picker_single_view", "location": ["tests/YCP/photo_picker_page_test.py", 26, "Test.test_photo_picker_single_view"], "keywords": {"test_photo_picker_single_view": 1, "picker": 1, "pytestmark": 1, "Test": 1, "photo_picker_page_test.py": 1, "tests/iOS/YCP/__init__.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0005320209999997161, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/sample/launcher_test.py::Test::test_hotfeature_select_photo", "location": ["tests/YCP/sample/launcher_test.py", 18, "Test.test_hotfeature_select_photo"], "keywords": {"test_hotfeature_select_photo": 1, "camera": 1, "pytestmark": 1, "Test": 1, "tests/iOS/YCP/sample/launcher_test.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<launcher_test.Test object at 0x12588b820>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/sample/launcher_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125bad1c0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<launcher_test.Test object at 0x12588b820>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/sample/launcher_test.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125bad1c0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.022249076999999673, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/sample/launcher_test.py::Test::test_hotfeature_select_photo", "location": ["tests/YCP/sample/launcher_test.py", 18, "Test.test_hotfeature_select_photo"], "keywords": {"test_hotfeature_select_photo": 1, "camera": 1, "pytestmark": 1, "Test": 1, "tests/iOS/YCP/sample/launcher_test.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0003566849999998567, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/sample/test_template_bill.py::Test::test_animation", "location": ["tests/YCP/sample/test_template_bill.py", 20, "Test.test_animation"], "keywords": {"test_animation": 1, "camera": 1, "pytestmark": 1, "Test": 1, "tests/iOS/YCP/sample/test_template_bill.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<test_template_bill.Test object at 0x125895190>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/sample/test_template_bill.py", "lineno": 11, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x12bd5a9d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<test_template_bill.Test object at 0x125895190>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/sample/test_template_bill.py", "lineno": 11, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x12bd5a9d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.02073099700000025, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/sample/test_template_bill.py::Test::test_animation", "location": ["tests/YCP/sample/test_template_bill.py", 20, "Test.test_animation"], "keywords": {"test_animation": 1, "camera": 1, "pytestmark": 1, "Test": 1, "tests/iOS/YCP/sample/test_template_bill.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00034132099999961696, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/sample/test_template_bill.py::Test::test_test", "location": ["tests/YCP/sample/test_template_bill.py", 32, "Test.test_test"], "keywords": {"test_test": 1, "camera": 1, "pytestmark": 1, "Test": 1, "tests/iOS/YCP/sample/test_template_bill.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<test_template_bill.Test object at 0x1258952e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/sample/test_template_bill.py", "lineno": 11, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125bad700>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": [">   ???"], "reprfuncargs": {"args": [["self", "<test_template_bill.Test object at 0x1258952e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/Users/zhongbill/flutter_windows_testing_ui/tests/YCP/sample/test_template_bill.py", "lineno": 11, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def set_auto(self):", "        # set udid", "        result = subprocess.run(", "            ['adb', 'devices'], stdout=subprocess.PIPE, text=True)", "        split_list = result.stdout.strip().split()", ">       index = split_list.index('device')", "E       ValueError: 'device' is not in list"], "reprfuncargs": {"args": [["self", "<libs.app.App object at 0x125bad700>"]]}, "reprlocals": null, "reprfileloc": {"path": "libs/app.py", "lineno": 40, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/Users/zhongbill/flutter_windows_testing_ui/libs/app.py", "lineno": 40, "message": "ValueError: 'device' is not in list"}, null]]}, "when": "setup", "user_properties": [], "sections": [], "duration": 0.022814077000000488, "$report_type": "TestReport"}
{"nodeid": "tests/iOS/YCP/sample/test_template_bill.py::Test::test_test", "location": ["tests/YCP/sample/test_template_bill.py", 32, "Test.test_test"], "keywords": {"test_test": 1, "camera": 1, "pytestmark": 1, "Test": 1, "tests/iOS/YCP/sample/test_template_bill.py": 1, "flutter_windows_testing_ui": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00030758900000016354, "$report_type": "TestReport"}
{"exitstatus": 1, "$report_type": "SessionFinish"}
